{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\cynth\\\\GitRepos\\\\2012-dec14-react\\\\projectOne\\\\front-end\\\\src\\\\components\\\\error.component.tsx\";\n\n/* I want to define a component that will render either\r\n the child components within it or a default view if an error occurs */\nimport { Component } from \"react\";\n\n// Error Boundary is a component that will display a default view if it catches an error\n// It's like a try/catch block but with components\nclass ErrorBoundaryComponent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      hasError: false,\n      error: null\n    };\n  }\n\n  // getDerivedStateFromError: update the state so the next render will show our fallback instead of the error\n  static getDerivedStateFromError(err) {\n    return {\n      hasError: true,\n      error: err\n    };\n  } // componentDidCatch: Hey, we caught an error\n  // this is where I would log an error or do any cleanup stuff.\n\n\n  componentDidCatch(error, errorInfo) {\n    console.error('Uncaught error:', error, errorInfo);\n  } // componentDidUpdate: Ok, so if there isn't an error anymore, just display things.\n\n\n  componentDidUpdate(previousProps) {\n    if (previousProps.children !== this.props.children) {\n      this.setState({\n        hasError: false,\n        error: null\n      });\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      var _this$state$error, _this$state$error2;\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" An error has occured, please contact support if this persists. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this), ((_this$state$error = this.state.error) === null || _this$state$error === void 0 ? void 0 : _this$state$error.name) + ': ' + ((_this$state$error2 = this.state.error) === null || _this$state$error2 === void 0 ? void 0 : _this$state$error2.message)]\n      }, void 0, true);\n    }\n\n    return this.props.children;\n  }\n\n}\n\nexport default ErrorBoundaryComponent;","map":{"version":3,"sources":["C:/Users/cynth/GitRepos/2012-dec14-react/projectOne/front-end/src/components/error.component.tsx"],"names":["Component","ErrorBoundaryComponent","state","hasError","error","getDerivedStateFromError","err","componentDidCatch","errorInfo","console","componentDidUpdate","previousProps","children","props","setState","render","name","message"],"mappings":";;;;AACA;AACA;AAEA,SAASA,SAAT,QAAgD,OAAhD;;AAWA;AACA;AACA,MAAMC,sBAAN,SAAqCD,SAArC,CAA6D;AAAA;AAAA;AAAA,SAClDE,KADkD,GACnC;AAClBC,MAAAA,QAAQ,EAAE,KADQ;AAElBC,MAAAA,KAAK,EAAE;AAFW,KADmC;AAAA;;AAMzD;AACA,SAAcC,wBAAd,CAAuCC,GAAvC,EAA0D;AACtD,WAAO;AAAEH,MAAAA,QAAQ,EAAE,IAAZ;AAAkBC,MAAAA,KAAK,EAAEE;AAAzB,KAAP;AACH,GATwD,CAWzD;AACA;;;AACOC,EAAAA,iBAAP,CAAyBH,KAAzB,EAAuCI,SAAvC,EAA6D;AACzDC,IAAAA,OAAO,CAACL,KAAR,CAAc,iBAAd,EAAiCA,KAAjC,EAAwCI,SAAxC;AACH,GAfwD,CAiBzD;;;AACOE,EAAAA,kBAAP,CAA0BC,aAA1B,EAAgD;AAC5C,QAAGA,aAAa,CAACC,QAAd,KAA2B,KAAKC,KAAL,CAAWD,QAAzC,EAAmD;AAC/C,WAAKE,QAAL,CAAe;AAACX,QAAAA,QAAQ,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAE;AAAzB,OAAf;AACH;AACJ;;AAEMW,EAAAA,MAAP,GAAgB;AACZ,QAAI,KAAKb,KAAL,CAAWC,QAAf,EAAyB;AAAA;;AAErB,0BACI;AAAA,gCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,EAEC,2BAAKD,KAAL,CAAWE,KAAX,wEAAkBY,IAAlB,IAAuB,IAAvB,0BAA4B,KAAKd,KAAL,CAAWE,KAAvC,uDAA4B,mBAAkBa,OAA9C,CAFD;AAAA,sBADJ;AAMH;;AACD,WAAO,KAAKJ,KAAL,CAAWD,QAAlB;AACH;;AAnCwD;;AAsC7D,eAAeX,sBAAf","sourcesContent":["\r\n/* I want to define a component that will render either\r\n the child components within it or a default view if an error occurs */\r\n\r\nimport { Component, ErrorInfo, ReactNode } from \"react\";\r\ninterface Props {\r\n    // allow us to have access to any elements that are children of this one.\r\n    children: ReactNode;\r\n}\r\n// could place this in the redux store, but for demo we're just using useState\r\ninterface State {\r\n    hasError: boolean;\r\n    error: Error | null;\r\n}\r\n\r\n// Error Boundary is a component that will display a default view if it catches an error\r\n// It's like a try/catch block but with components\r\nclass ErrorBoundaryComponent extends Component<Props, State> {\r\n    public state: State = {\r\n        hasError: false,\r\n        error: null\r\n    }\r\n\r\n    // getDerivedStateFromError: update the state so the next render will show our fallback instead of the error\r\n    public static getDerivedStateFromError(err: Error): State {\r\n        return { hasError: true, error: err };\r\n    }\r\n\r\n    // componentDidCatch: Hey, we caught an error\r\n    // this is where I would log an error or do any cleanup stuff.\r\n    public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n        console.error('Uncaught error:', error, errorInfo);\r\n    }\r\n\r\n    // componentDidUpdate: Ok, so if there isn't an error anymore, just display things.\r\n    public componentDidUpdate(previousProps: Props) {\r\n        if(previousProps.children !== this.props.children) {\r\n            this.setState( {hasError: false, error: null});\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        if (this.state.hasError) {\r\n\r\n            return (\r\n                <>\r\n                <h1> An error has occured, please contact support if this persists. </h1>\r\n                {this.state.error?.name+': '+this.state.error?.message}\r\n                </>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundaryComponent;"]},"metadata":{},"sourceType":"module"}