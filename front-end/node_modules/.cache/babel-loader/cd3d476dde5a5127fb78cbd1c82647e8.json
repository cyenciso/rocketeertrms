{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\cynth\\\\GitRepos\\\\2012-dec14-react\\\\projectOne\\\\front-end\\\\src\\\\components\\\\editRequest.tsx\",\n    _s = $RefreshSig$();\n\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport '../css/editRequest.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport React, { useEffect, useRef, useState } from 'react';\nimport requestService from '../services/request.service';\nimport employeeService from '../services/employee.service';\nimport { getEmployee, getSeniorEmployee } from '../redux/actions';\nimport { Employee } from '../models/employee.model';\n\nfunction EditRequest() {\n  _s();\n\n  // use redux hooks\n  const employee = useSelector(state => state.employee);\n  console.log('Current employee: ', employee);\n  const newEmployee = { ...employee\n  };\n  const request = useSelector(state => state.request);\n  const newRequest = { ...request\n  };\n  console.log('Current request in state: ', request.id);\n  const history = useHistory();\n  const dispatch = useDispatch(); // get junior employees from database\n\n  const [juniorEmployees, setEmployees] = useState([new Employee()]);\n  useEffect(() => {\n    async function getJuniorEmployees() {\n      // get all employees BELOW my role, make them options in a selection input\n      const employeesReturned = await employeeService.getEmployees().then(employeesReturned => {\n        console.log('all employees returned from db: ', employeesReturned); //then perform calculations\n\n        return employeesReturned;\n      }).catch(() => {\n        console.log('Error, could not get employees');\n      }); // get junior employees\n\n      const juniorEmployees = [];\n\n      if (employeesReturned) {\n        employeesReturned.forEach(employeeElement => {\n          if (employeeElement.role.length < employee.role.length) {\n            if (employee.role.includes('Head') && !employeeElement.role.includes('BenCo')) {\n              juniorEmployees.push(employeeElement);\n            }\n          }\n        });\n      }\n\n      setEmployees(juniorEmployees);\n    }\n\n    getJuniorEmployees();\n  }, [employee.role]); // check if employee and request's maker are the same\n\n  console.log(employee.demographics.email);\n  console.log(request.demographics.email);\n  let match = employee.demographics.email === request.demographics.email ? true : false;\n  console.log(match); //refs for input values\n\n  const rejectionRef = useRef();\n  const moreInfoRef = useRef();\n  const resubmitInfoRef = useRef();\n  const employeeChoiceRef = useRef(); // check status of request\n\n  let status = request.statusOf;\n  let needsRevision = false;\n  let isRevised = false; // if needs revision\n\n  if (status.includes('Needs Revision')) {\n    // from someone other than employee\n    const wordArray = status.split(' ');\n    let username = wordArray[3];\n\n    if (username === employee.username) {\n      needsRevision = true;\n    }\n  } // if revised\n\n\n  if (resubmitInfoRef.current.value) {\n    isRevised = true;\n  } // handle cancel button\n\n\n  function handleGoBackButtonClick() {\n    history.push(\"/dashboard\");\n  } // handle rejection button\n\n\n  async function handleRejectionButtonClick() {\n    // make sure rejection decision is filled\n    if (!rejectionRef.current.value) {\n      console.log('Error, please enter a rejection reason.');\n    } else {\n      // iterate over employee's requests and delete the specific request\n      for (let i = 0; i < employee.requests.length; i++) {\n        if (request.id === employee.requests[i].id) {\n          newEmployee.requests.splice(i, 1);\n        }\n      } //update current employee with new array of requests\n\n\n      employeeService.updateEmployee(newEmployee).then(employeeReturned => {\n        console.log('employee dispatched to employee state: ', employeeReturned);\n        dispatch(getEmployee(employeeReturned));\n      }).catch(() => {\n        console.log('Employee could not be updated!');\n      }); // change request status and request rejection info in request table (update request)\n\n      newRequest.statusOf = 'Rejected';\n      newRequest.rejectInfo = rejectionRef.current.value; // update request in DB, no need to dispatch\n\n      requestService.updateRequest(newRequest).then().catch(() => {\n        console.log('Error, could not update request in database.');\n      }); // get requestor by username\n\n      const requestor = await employeeService.getEmployeeByUsername(newRequest.username).then(employeeReturned => {\n        console.log('requestor returned: ', employeeReturned);\n        return employeeReturned;\n      }).catch(() => {\n        console.log('Error, could not get requestor from database');\n      }); //update their request\n\n      if (requestor) {\n        for (let i = 0; i < requestor.requests.length; i++) {\n          if (request.id === requestor.requests[i].id) {\n            requestor.requests.splice(i, 1);\n            requestor.requests.push(newRequest);\n          }\n        }\n      } // update employee whose status is affected\n\n\n      if (requestor) {\n        employeeService.updateEmployee(requestor).then(() => {\n          history.push('/dashboard');\n        }).catch(() => {\n          console.log('Employee could not be updated!');\n        });\n      }\n    }\n  } // handle accept button\n\n\n  async function handleAcceptButtonClick() {\n    // if BenCo\n    if (newEmployee.role.includes('BenCo')) {\n      // change request's status to accepted (update requestor employee)\n      newRequest.statusOf = 'Accepted'; // get requestor by username\n\n      const requestor = await employeeService.getEmployeeByUsername(newRequest.username).then(employeeReturned => {\n        console.log('requestor returned: ', employeeReturned);\n        return employeeReturned;\n      }).catch(() => {\n        console.log('Error, could not get requestor from database');\n      }); //update their request\n\n      if (requestor) {\n        for (let i = 0; i < requestor.requests.length; i++) {\n          if (request.id === requestor.requests[i].id) {\n            requestor.requests.splice(i, 1);\n            requestor.requests.push(newRequest);\n          }\n        }\n      } // update employee whose request status is affected\n\n\n      if (requestor) {\n        employeeService.updateEmployee(requestor).then().catch(() => {\n          console.log('Employee could not be updated!');\n        });\n      } // change request status in request table (update request)\n\n\n      requestService.updateRequest(newRequest).then().catch(() => {\n        console.log('Error, could not update request in database.');\n      });\n    } else {\n      //get senior employee\n      let arrayReturned = await employeeService.getSeniorEmployeeByRole(newEmployee.role).then(employees => {\n        return employees;\n      }).catch(() => {\n        console.log('Error, could not get senior employee!');\n      });\n      let newArray = [];\n\n      if (arrayReturned) {\n        for (const prop in arrayReturned) {\n          newArray.push(arrayReturned[prop]);\n        }\n      }\n\n      const newSeniorEmployee = newArray[0]; // add the request to the senior employee\n\n      newSeniorEmployee.requests.push(newRequest); //add request to senior employee's requests\n\n      employeeService.updateEmployee(newSeniorEmployee).then(employeeReturned => {\n        console.log('employee dispatched to senioremployee state: ', employeeReturned);\n        dispatch(getSeniorEmployee(employeeReturned));\n      }).catch(() => {\n        console.log('Employee could not be updated!');\n      });\n    } // iterate over employee's requests and delete the specific request\n\n\n    for (let i = 0; i < employee.requests.length; i++) {\n      if (request.id === employee.requests[i].id) {\n        newEmployee.requests.splice(i, 1);\n      }\n    } //update current employee with new array of requests\n\n\n    employeeService.updateEmployee(newEmployee).then(employeeReturned => {\n      console.log('employee dispatched to employee state: ', employeeReturned);\n      dispatch(getEmployee(employeeReturned));\n      history.push('/dashboard');\n    }).catch(() => {\n      console.log('Employee could not be updated!');\n    });\n  } // handle request info button\n\n\n  async function handleRequestInfoButtonClick() {\n    console.log('request more info button clicked'); // make sure proper selection of employee is made\n\n    const chosenEmployeeUsername = employeeChoiceRef.current.value;\n\n    if (!moreInfoRef.current.value) {\n      console.log('Error, please enter a request for more information.');\n    } else {\n      // change request status in database (update request)\n      newRequest.statusOf = 'Needs Revision from ' + chosenEmployeeUsername + ' for ' + JSON.stringify(employee.role);\n      newRequest.requestInfo = moreInfoRef.current.value;\n      requestService.updateRequest(newRequest).then().catch(() => {\n        console.log('Error, could not update request in database.');\n      }); //give request to the selected person if they are NOT the requestor\n\n      if (chosenEmployeeUsername !== request.username) {\n        //give request to selected person\n        employeeService.getEmployeeByUsername(chosenEmployeeUsername).then(employee => {\n          employee.requests.push(newRequest);\n          employeeService.updateEmployee(employee).then().catch(() => {\n            console.log('Error, could not update selected employee');\n          });\n        }).catch(() => {\n          console.log('Error, could not get selected employee from database');\n        });\n      } // change requestor's current request's status (update employee)\n      // get from db by username\n\n\n      const requestor = employeeService.getEmployeeByUsername(request.username).then(employee => {\n        return employee;\n      }).catch(() => {\n        console.log('Error, could not get user from database');\n      });\n\n      if (requestor) {\n        requestor.then(requestor => {\n          //update their request\n          if (requestor) {\n            for (let i = 0; i < requestor.requests.length; i++) {\n              if (request.id === requestor.requests[i].id) {\n                requestor.requests.splice(i, 1);\n                requestor.requests.push(newRequest);\n              }\n            }\n          } // update employee whose request status is affected\n\n\n          if (requestor) {\n            employeeService.updateEmployee(requestor).then().catch(() => {\n              history.push('/dashboard');\n              console.log('Employee could not be updated!');\n            });\n          }\n        });\n      } // iterate over employee's requests and delete the specific request\n\n\n      for (let i = 0; i < employee.requests.length; i++) {\n        if (request.id === employee.requests[i].id) {\n          newEmployee.requests.splice(i, 1);\n        }\n      } //update current employee with new array of requests\n\n\n      employeeService.updateEmployee(newEmployee).then(employeeReturned => {\n        console.log('employee dispatched to employee state: ', employeeReturned);\n        dispatch(getEmployee(employeeReturned));\n        history.push('/dashboard');\n      }).catch(() => {\n        console.log('Employee could not be updated!');\n      });\n    }\n  }\n\n  function handleResubmitButtonClick() {\n    //make sure resubmit info is filled\n    if (!resubmitInfoRef.current.value) {\n      console.log('Error, please enter additional information');\n    } else {\n      // change request status, update request in db\n      newRequest.statusOf = 'Pending';\n      newRequest.resubmitInfo = resubmitInfoRef.current.value;\n      requestService.updateRequest(newRequest).then().catch(() => {\n        console.log('Error, could not update request in database.');\n      }); // change current employee's request status if NOT requestor, update employee in db\n      // change requestor's current request's status (update employee)\n      // get from db by username\n\n      const requestor = employeeService.getEmployeeByUsername(request.username).then(employee => {\n        return employee;\n      }).catch(() => {\n        console.log('Error, could not get user from database');\n      });\n\n      if (requestor) {\n        requestor.then(requestor => {\n          //update their request\n          if (requestor) {\n            for (let i = 0; i < requestor.requests.length; i++) {\n              if (request.id === requestor.requests[i].id) {\n                requestor.requests.splice(i, 1);\n                requestor.requests.push(newRequest);\n              }\n            }\n          } // update employee whose request status is affected\n\n\n          if (requestor) {\n            employeeService.updateEmployee(requestor).then().catch(() => {\n              history.push('/dashboard');\n              console.log('Employee could not be updated!');\n            });\n          }\n        });\n      } // give request back to employee whose role is mentioned in status\n      //might need to create a getemployee by role functionality :(\n      //make sure to push history to dashboard\n\n    }\n  } //this function is for if benco alters reimbursement\n\n\n  function handleCancelRequestButtonClick() {// delete request from database\n    // remove request from current employee (update employee)\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    id: \"editRequestContainer\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      id: \"reimbursementForm\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        lg: 8,\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          id: \"reimbursementHeader\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            md: \"10\",\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Tuition Reimbursement Form\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          id: \"reimbursementBody\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n                className: \"justify-content-md-center\",\n                children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  controlId: \"formDateCreated\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Today's Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 390,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: request.dateCreated,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 391,\n                    columnNumber: 45\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 389,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"First Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 396,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: request.demographics.firstname,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 397,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Last Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 398,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: request.demographics.lastname,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 399,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Phone Number\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 402,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: request.demographics.phone,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 403,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Email\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 404,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: request.demographics.email,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 405,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 401,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Event Type\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 410,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: request.event.eventType,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 411,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Cost\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 413,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: request.event.cost.toString(),\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 414,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Projected Reimbursement\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 415,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 416,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Start Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 419,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: request.event.startDate,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 420,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"End Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 421,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: request.event.endDate,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 422,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 418,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Grading Format\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 425,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: request.event.gradingFormat,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 426,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Location\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 428,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: request.event.location,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 429,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 424,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Event Description\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 434,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"textarea\",\n                    rows: 3,\n                    placeholder: request.event.description,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 435,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Justification\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 438,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"textarea\",\n                    rows: 3,\n                    placeholder: request.justification,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 439,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 437,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [status === 'Pending' && !match ? /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Rejection Reason\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 445,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"textarea\",\n                    rows: 3,\n                    ref: rejectionRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 446,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 444,\n                  columnNumber: 71\n                }, this) : null, status === 'Rejected' ? /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Rejection Reason\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 449,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"textarea\",\n                    rows: 3,\n                    placeholder: request.rejectInfo,\n                    ref: rejectionRef,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 450,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 448,\n                  columnNumber: 62\n                }, this) : null, (status.includes('Needs Revision') || isRevised) && !match ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                    as: Col,\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"Information Requested\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 454,\n                      columnNumber: 62\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      as: \"textarea\",\n                      rows: 3,\n                      ref: moreInfoRef,\n                      placeholder: request.requestInfo,\n                      readOnly: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 455,\n                      columnNumber: 41\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 454,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                    as: Col,\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"Additional Information\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 457,\n                      columnNumber: 41\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      as: \"textarea\",\n                      rows: 3,\n                      ref: resubmitInfoRef\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 458,\n                      columnNumber: 41\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 456,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true) : null, status === 'Pending' && !match ? /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Select Employee\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 462,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    as: \"select\",\n                    ref: employeeChoiceRef,\n                    children: juniorEmployees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: employee.username,\n                      children: employee.username\n                    }, employee.username, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 464,\n                      columnNumber: 79\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 463,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Request More Information\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 466,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"textarea\",\n                    rows: 3,\n                    ref: moreInfoRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 467,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 461,\n                  columnNumber: 71\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                id: \"createRequestButtonRow\",\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  className: \"d-flex justify-content-center\",\n                  children: [status === 'Pending' && !match ? /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"danger\",\n                    onClick: handleRejectionButtonClick,\n                    children: \"Reject Request\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 473,\n                    columnNumber: 75\n                  }, this) : null, status.includes('Needs Revision') && match ? /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"danger\",\n                    children: \"Cancel Request\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 476,\n                    columnNumber: 87\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 471,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  className: \"d-flex justify-content-center\",\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"warning\",\n                    onClick: handleGoBackButtonClick,\n                    children: \"Go Back\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 482,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 480,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  className: \"d-flex justify-content-center\",\n                  children: [status === 'Pending' && !match ? /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"success\",\n                    onClick: handleAcceptButtonClick,\n                    children: \"Approve\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 489,\n                    columnNumber: 41\n                  }, this) : null, needsRevision ? /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"success\",\n                    onClick: handleResubmitButtonClick,\n                    children: \"Resubmit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 493,\n                    columnNumber: 41\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 486,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  className: \"d-flex justify-content-center\",\n                  children: status === 'Pending' && !match ? /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"info\",\n                    onClick: handleRequestInfoButtonClick,\n                    children: \"Request More Info\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 500,\n                    columnNumber: 41\n                  }, this) : null\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 497,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 374,\n    columnNumber: 9\n  }, this);\n}\n\n_s(EditRequest, \"LV6SQ2VTEqpfBngeN4rizik3leE=\", false, function () {\n  return [useSelector, useSelector, useHistory, useDispatch];\n});\n\n_c = EditRequest;\nexport default EditRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditRequest\");","map":{"version":3,"sources":["C:/Users/cynth/GitRepos/2012-dec14-react/projectOne/front-end/src/components/editRequest.tsx"],"names":["Container","Form","Button","Row","Col","useDispatch","useSelector","useHistory","React","useEffect","useRef","useState","requestService","employeeService","getEmployee","getSeniorEmployee","Employee","EditRequest","employee","state","console","log","newEmployee","request","newRequest","id","history","dispatch","juniorEmployees","setEmployees","getJuniorEmployees","employeesReturned","getEmployees","then","catch","forEach","employeeElement","role","length","includes","push","demographics","email","match","rejectionRef","moreInfoRef","resubmitInfoRef","employeeChoiceRef","status","statusOf","needsRevision","isRevised","wordArray","split","username","current","value","handleGoBackButtonClick","handleRejectionButtonClick","i","requests","splice","updateEmployee","employeeReturned","rejectInfo","updateRequest","requestor","getEmployeeByUsername","handleAcceptButtonClick","arrayReturned","getSeniorEmployeeByRole","employees","newArray","prop","newSeniorEmployee","handleRequestInfoButtonClick","chosenEmployeeUsername","JSON","stringify","requestInfo","handleResubmitButtonClick","resubmitInfo","handleCancelRequestButtonClick","dateCreated","firstname","lastname","phone","event","eventType","cost","toString","startDate","endDate","gradingFormat","location","description","justification","map"],"mappings":"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","sourcesContent":["import Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport '../css/editRequest.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { EmployeeState, RequestState } from '../redux/reducer';\r\nimport { useHistory } from 'react-router-dom';\r\nimport React, { MutableRefObject, useEffect, useRef, useState } from 'react';\r\nimport requestService from '../services/request.service';\r\nimport employeeService from '../services/employee.service';\r\nimport { getEmployee, getSeniorEmployee } from '../redux/actions';\r\nimport { Employee } from '../models/employee.model';\r\n\r\nfunction EditRequest() {\r\n    // use redux hooks\r\n    const employee = useSelector((state: EmployeeState) => state.employee);\r\n    console.log('Current employee: ', employee);\r\n    const newEmployee = {...employee};\r\n\r\n    const request = useSelector((state: RequestState) => state.request);\r\n    const newRequest = {...request};\r\n    console.log('Current request in state: ', request.id);\r\n    \r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    // get junior employees from database\r\n    const [juniorEmployees, setEmployees] = useState([new Employee()]);\r\n    useEffect(() => {\r\n        async function getJuniorEmployees() {\r\n            // get all employees BELOW my role, make them options in a selection input\r\n            const employeesReturned = await employeeService.getEmployees().then( employeesReturned => {\r\n                console.log('all employees returned from db: ', employeesReturned);\r\n                //then perform calculations\r\n                return employeesReturned;\r\n            }).catch( () => {\r\n                console.log('Error, could not get employees');\r\n            });\r\n\r\n            // get junior employees\r\n            const juniorEmployees: Employee[] = [];\r\n\r\n            if (employeesReturned) {\r\n                employeesReturned.forEach( (employeeElement: any) => {\r\n                    if (employeeElement.role.length < employee.role.length) {\r\n                        if (employee.role.includes('Head') && !employeeElement.role.includes('BenCo')) {\r\n                            juniorEmployees.push(employeeElement);\r\n                        }\r\n                        \r\n                    }\r\n                });\r\n            }\r\n            setEmployees(juniorEmployees);\r\n        }\r\n        getJuniorEmployees();\r\n    }, [employee.role]);\r\n\r\n    // check if employee and request's maker are the same\r\n    console.log(employee.demographics.email);\r\n    console.log(request.demographics.email);\r\n    let match = employee.demographics.email === request.demographics.email ? true : false;\r\n    console.log(match);\r\n\r\n    //refs for input values\r\n    const rejectionRef = useRef() as MutableRefObject<HTMLTextAreaElement>;\r\n    const moreInfoRef = useRef() as MutableRefObject<HTMLTextAreaElement>;\r\n    const resubmitInfoRef = useRef() as MutableRefObject<HTMLTextAreaElement>;\r\n    const employeeChoiceRef = useRef() as MutableRefObject<HTMLSelectElement>;\r\n\r\n    // check status of request\r\n    let status = request.statusOf;\r\n    let needsRevision = false;\r\n    let isRevised = false;\r\n\r\n    // if needs revision\r\n    if (status.includes('Needs Revision')) {\r\n        // from someone other than employee\r\n        const wordArray = status.split(' ');\r\n        let username = wordArray[3];\r\n        if (username === employee.username) {\r\n            needsRevision = true;\r\n        }\r\n    }\r\n\r\n    // if revised\r\n    if (resubmitInfoRef.current.value) {\r\n        isRevised = true;\r\n    }\r\n\r\n\r\n\r\n    // handle cancel button\r\n    function handleGoBackButtonClick() {\r\n        history.push(\"/dashboard\");\r\n    }\r\n\r\n    // handle rejection button\r\n    async function handleRejectionButtonClick() {\r\n        // make sure rejection decision is filled\r\n        if (!rejectionRef.current.value) {\r\n            console.log('Error, please enter a rejection reason.');\r\n        } else {\r\n            // iterate over employee's requests and delete the specific request\r\n            for (let i = 0; i < employee.requests.length; i++) {\r\n                if (request.id === employee.requests[i].id) {\r\n                    newEmployee.requests.splice(i, 1);\r\n                }\r\n            }\r\n            //update current employee with new array of requests\r\n            employeeService.updateEmployee(newEmployee).then( employeeReturned => {\r\n                console.log('employee dispatched to employee state: ', employeeReturned);\r\n                dispatch(getEmployee(employeeReturned));\r\n            }).catch( () => {\r\n                console.log('Employee could not be updated!');\r\n            });\r\n\r\n            // change request status and request rejection info in request table (update request)\r\n            newRequest.statusOf = 'Rejected';\r\n            newRequest.rejectInfo = rejectionRef.current.value;\r\n            // update request in DB, no need to dispatch\r\n            requestService.updateRequest(newRequest).then().catch( () => {\r\n                console.log('Error, could not update request in database.');\r\n            });\r\n    \r\n            // get requestor by username\r\n            const requestor = await employeeService.getEmployeeByUsername(newRequest.username).then( employeeReturned => {\r\n                console.log('requestor returned: ', employeeReturned);\r\n                return employeeReturned;\r\n            }).catch( () => {\r\n                console.log('Error, could not get requestor from database');\r\n            });\r\n\r\n            //update their request\r\n            if (requestor) {\r\n                for (let i = 0; i < requestor.requests.length; i++) {\r\n                    if (request.id === requestor.requests[i].id) {\r\n                        requestor.requests.splice(i, 1);\r\n                        requestor.requests.push(newRequest);\r\n                    }\r\n                }\r\n            }\r\n             \r\n\r\n            // update employee whose status is affected\r\n            if (requestor) {\r\n                employeeService.updateEmployee(requestor).then( () => {\r\n                    history.push('/dashboard');\r\n                }).catch( () => {\r\n                    console.log('Employee could not be updated!');\r\n                });\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    // handle accept button\r\n    async function handleAcceptButtonClick() {\r\n\r\n        // if BenCo\r\n        if (newEmployee.role.includes('BenCo')) {\r\n            // change request's status to accepted (update requestor employee)\r\n            newRequest.statusOf = 'Accepted';\r\n\r\n            // get requestor by username\r\n            const requestor = await employeeService.getEmployeeByUsername(newRequest.username).then( employeeReturned => {\r\n                console.log('requestor returned: ', employeeReturned);\r\n                return employeeReturned;\r\n            }).catch( () => {\r\n                console.log('Error, could not get requestor from database');\r\n            });\r\n\r\n            //update their request\r\n            if (requestor) {\r\n                for (let i = 0; i < requestor.requests.length; i++) {\r\n                    if (request.id === requestor.requests[i].id) {\r\n                        requestor.requests.splice(i, 1);\r\n                        requestor.requests.push(newRequest);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // update employee whose request status is affected\r\n            if (requestor) {\r\n                employeeService.updateEmployee(requestor).then().catch( () => {\r\n                    console.log('Employee could not be updated!');\r\n                });\r\n            }\r\n\r\n            // change request status in request table (update request)\r\n            requestService.updateRequest(newRequest).then().catch( () => {\r\n                console.log('Error, could not update request in database.');\r\n            });\r\n        } else {\r\n            //get senior employee\r\n            let arrayReturned = await employeeService.getSeniorEmployeeByRole(newEmployee.role).then( employees => {\r\n                return employees;\r\n            }).catch(() => {\r\n                console.log('Error, could not get senior employee!');\r\n            });\r\n            let newArray: Employee[] = [];\r\n            if (arrayReturned) {\r\n                for (const prop in arrayReturned) {\r\n                        newArray.push(arrayReturned[prop]);\r\n                    }\r\n            }\r\n            const newSeniorEmployee = newArray[0];\r\n\r\n            // add the request to the senior employee\r\n            newSeniorEmployee.requests.push(newRequest);\r\n\r\n            //add request to senior employee's requests\r\n            employeeService.updateEmployee(newSeniorEmployee).then( employeeReturned => {\r\n                console.log('employee dispatched to senioremployee state: ', employeeReturned);\r\n                dispatch(getSeniorEmployee(employeeReturned));\r\n            }).catch( () => {\r\n                console.log('Employee could not be updated!');\r\n            });\r\n        }\r\n\r\n        // iterate over employee's requests and delete the specific request\r\n        for (let i = 0; i < employee.requests.length; i++) {\r\n            if (request.id === employee.requests[i].id) {\r\n                newEmployee.requests.splice(i, 1);\r\n            }\r\n        }\r\n        //update current employee with new array of requests\r\n        employeeService.updateEmployee(newEmployee).then( employeeReturned => {\r\n            console.log('employee dispatched to employee state: ', employeeReturned);\r\n            dispatch(getEmployee(employeeReturned));\r\n            history.push('/dashboard');\r\n        }).catch( () => {\r\n            console.log('Employee could not be updated!');\r\n        });\r\n    }\r\n\r\n    // handle request info button\r\n    async function handleRequestInfoButtonClick() {\r\n        console.log('request more info button clicked');\r\n        // make sure proper selection of employee is made\r\n        const chosenEmployeeUsername = employeeChoiceRef.current.value;\r\n\r\n        if (!moreInfoRef.current.value) {\r\n            console.log('Error, please enter a request for more information.');\r\n        } else {\r\n            // change request status in database (update request)\r\n            newRequest.statusOf = 'Needs Revision from ' + chosenEmployeeUsername + ' for ' + JSON.stringify(employee.role);\r\n            newRequest.requestInfo = moreInfoRef.current.value;\r\n            requestService.updateRequest(newRequest).then().catch( () => {\r\n                console.log('Error, could not update request in database.');\r\n            });\r\n\r\n            //give request to the selected person if they are NOT the requestor\r\n            if (chosenEmployeeUsername !== request.username) {\r\n                //give request to selected person\r\n                employeeService.getEmployeeByUsername(chosenEmployeeUsername).then( employee => {\r\n                    employee.requests.push(newRequest);\r\n                    employeeService.updateEmployee(employee).then().catch( () => {\r\n                        console.log('Error, could not update selected employee');\r\n                    });\r\n                }).catch( () => {\r\n                    console.log('Error, could not get selected employee from database');\r\n                });\r\n            }\r\n\r\n            // change requestor's current request's status (update employee)\r\n            // get from db by username\r\n            const requestor = employeeService.getEmployeeByUsername(request.username).then( employee => {\r\n                return employee;\r\n            }).catch( () => {\r\n                console.log('Error, could not get user from database');\r\n            });\r\n\r\n            if (requestor) {\r\n                requestor.then( requestor => {\r\n                    //update their request\r\n                    if (requestor) {\r\n                        for (let i = 0; i < requestor.requests.length; i++) {\r\n                            if (request.id === requestor.requests[i].id) {\r\n                                requestor.requests.splice(i, 1);\r\n                                requestor.requests.push(newRequest);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // update employee whose request status is affected\r\n                    if (requestor) {\r\n                        employeeService.updateEmployee(requestor).then().catch( () => {\r\n                            history.push('/dashboard');\r\n                            console.log('Employee could not be updated!');\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n            // iterate over employee's requests and delete the specific request\r\n            for (let i = 0; i < employee.requests.length; i++) {\r\n                if (request.id === employee.requests[i].id) {\r\n                    newEmployee.requests.splice(i, 1);\r\n                }\r\n            }\r\n            //update current employee with new array of requests\r\n            employeeService.updateEmployee(newEmployee).then( employeeReturned => {\r\n                console.log('employee dispatched to employee state: ', employeeReturned);\r\n                dispatch(getEmployee(employeeReturned));\r\n                history.push('/dashboard');\r\n            }).catch( () => {\r\n                console.log('Employee could not be updated!');\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleResubmitButtonClick() {\r\n        //make sure resubmit info is filled\r\n        if(!resubmitInfoRef.current.value) {\r\n            console.log('Error, please enter additional information');\r\n        } else {\r\n            // change request status, update request in db\r\n            newRequest.statusOf = 'Pending';\r\n            newRequest.resubmitInfo = resubmitInfoRef.current.value;\r\n            requestService.updateRequest(newRequest).then().catch( () => {\r\n                console.log('Error, could not update request in database.');\r\n            });\r\n\r\n            // change current employee's request status if NOT requestor, update employee in db\r\n\r\n            // change requestor's current request's status (update employee)\r\n            // get from db by username\r\n            const requestor = employeeService.getEmployeeByUsername(request.username).then( employee => {\r\n                return employee;\r\n            }).catch( () => {\r\n                console.log('Error, could not get user from database');\r\n            });\r\n            \r\n            if (requestor) {\r\n                requestor.then( requestor => {\r\n                    //update their request\r\n                    if (requestor) {\r\n                        for (let i = 0; i < requestor.requests.length; i++) {\r\n                            if (request.id === requestor.requests[i].id) {\r\n                                requestor.requests.splice(i, 1);\r\n                                requestor.requests.push(newRequest);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // update employee whose request status is affected\r\n                    if (requestor) {\r\n                        employeeService.updateEmployee(requestor).then().catch( () => {\r\n                            history.push('/dashboard');\r\n                            console.log('Employee could not be updated!');\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n\r\n            // give request back to employee whose role is mentioned in status\r\n                //might need to create a getemployee by role functionality :(\r\n                //make sure to push history to dashboard\r\n        }\r\n        \r\n    }\r\n\r\n    //this function is for if benco alters reimbursement\r\n    function handleCancelRequestButtonClick() {\r\n        // delete request from database\r\n\r\n        // remove request from current employee (update employee)\r\n\r\n    }\r\n\r\n    return (\r\n        <Container id=\"editRequestContainer\">\r\n            <Row id=\"reimbursementForm\">\r\n                <Col />\r\n                <Col lg={8}>\r\n                    <Row id=\"reimbursementHeader\">\r\n                        <Col />\r\n                        <Col md=\"10\" className=\"text-center\">\r\n                            <h1>Tuition Reimbursement Form</h1>\r\n                        </Col>\r\n                        <Col />\r\n                    </Row>\r\n                    <Row id=\"reimbursementBody\">\r\n                        <Col>\r\n                            <Form>\r\n                                <Form.Row className=\"justify-content-md-center\">\r\n                                    <Form.Group as={Col} controlId=\"formDateCreated\">\r\n                                            <Form.Label>Today's Date</Form.Label>\r\n                                            <Form.Control type=\"text\" placeholder={request.dateCreated} readOnly/>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>First Name</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={request.demographics.firstname} readOnly/>\r\n                                        <Form.Label>Last Name</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={request.demographics.lastname} readOnly/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Phone Number</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={request.demographics.phone} readOnly/>\r\n                                        <Form.Label>Email</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={request.demographics.email} readOnly/>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Event Type</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={request.event.eventType} readOnly >\r\n                                        </Form.Control>\r\n                                        <Form.Label>Cost</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={request.event.cost.toString()} readOnly/>\r\n                                        <Form.Label>Projected Reimbursement</Form.Label>\r\n                                        <Form.Control type=\"text\" readOnly />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Start Date</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={request.event.startDate} readOnly/>\r\n                                        <Form.Label>End Date</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={request.event.endDate}readOnly/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Grading Format</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={request.event.gradingFormat}readOnly>\r\n                                        </Form.Control>\r\n                                        <Form.Label>Location</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={request.event.location}readOnly/>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Event Description</Form.Label>\r\n                                        <Form.Control  as=\"textarea\" rows={3} placeholder={request.event.description} readOnly/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Justification</Form.Label>\r\n                                        <Form.Control as=\"textarea\" rows={3} placeholder={request.justification} readOnly/>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    {/* if status is pending */}\r\n                                    {status === 'Pending' && !match ? <Form.Group as={Col}>\r\n                                        <Form.Label>Rejection Reason</Form.Label>\r\n                                        <Form.Control  as=\"textarea\" rows={3}  ref={rejectionRef}/>\r\n                                    </Form.Group> : null }\r\n                                    {status === 'Rejected' ? <Form.Group as={Col}>\r\n                                        <Form.Label>Rejection Reason</Form.Label>\r\n                                        <Form.Control  as=\"textarea\" rows={3}  placeholder={request.rejectInfo} ref={rejectionRef} readOnly/>\r\n                                    </Form.Group> : null }\r\n                                    {/* if status is Needs Revision */}\r\n                                    {(status.includes('Needs Revision') || isRevised) && !match ? <>\r\n                                        <Form.Group as={Col}><Form.Label>Information Requested</Form.Label>\r\n                                        <Form.Control as=\"textarea\" rows={3} ref={moreInfoRef} placeholder={request.requestInfo} readOnly/></Form.Group>\r\n                                        <Form.Group as={Col}>\r\n                                        <Form.Label>Additional Information</Form.Label>\r\n                                        <Form.Control as=\"textarea\" rows={3} ref={resubmitInfoRef}/>\r\n                                    </Form.Group></>: null }\r\n                                    {/* if status is pending */}\r\n                                    {status === 'Pending' && !match ? <Form.Group as={Col}>\r\n                                        <Form.Label>Select Employee</Form.Label>\r\n                                        <Form.Control type=\"text\" as=\"select\" ref={employeeChoiceRef}>\r\n                                            {juniorEmployees.map( employee => <option key={employee.username} value={employee.username}>{employee.username}</option>)}\r\n                                        </Form.Control>\r\n                                        <Form.Label>Request More Information</Form.Label>\r\n                                        <Form.Control as=\"textarea\" rows={3} ref={moreInfoRef}/>\r\n                                    </Form.Group> : null}\r\n                                </Form.Row>\r\n                                <Form.Row id=\"createRequestButtonRow\">\r\n                                    <Col className=\"d-flex justify-content-center\">\r\n                                         {/* red button */}\r\n                                        {status === 'Pending' && !match ? <Button variant=\"danger\" onClick={handleRejectionButtonClick}>\r\n                                            Reject Request\r\n                                        </Button>: null }\r\n                                        {status.includes('Needs Revision') && match ? <Button variant=\"danger\">\r\n                                            Cancel Request\r\n                                        </Button>: null }\r\n                                    </Col>\r\n                                    <Col className=\"d-flex justify-content-center\">\r\n                                        {/* yellow button */}\r\n                                        <Button variant=\"warning\" onClick={handleGoBackButtonClick}>\r\n                                            Go Back\r\n                                        </Button>\r\n                                    </Col>\r\n                                    <Col className=\"d-flex justify-content-center\">\r\n                                        {/* green button */}\r\n                                        {status === 'Pending' && !match ? \r\n                                        <Button variant=\"success\" onClick={handleAcceptButtonClick}>\r\n                                            Approve\r\n                                        </Button> : null }\r\n                                        {needsRevision ?\r\n                                        <Button variant=\"success\" onClick={handleResubmitButtonClick} >\r\n                                            Resubmit\r\n                                        </Button> : null }\r\n                                    </Col>\r\n                                    <Col className=\"d-flex justify-content-center\">\r\n                                        {/* blue button */}\r\n                                        {status === 'Pending' && !match?\r\n                                        <Button variant=\"info\" onClick={handleRequestInfoButtonClick}>\r\n                                            Request More Info\r\n                                        </Button> : null }\r\n                                    </Col>\r\n                                </Form.Row>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n                <Col />\r\n            </Row>\r\n        </Container>\r\n      );\r\n}\r\n\r\nexport default EditRequest;"]},"metadata":{},"sourceType":"module"}