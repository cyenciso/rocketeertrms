{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\cynth\\\\GitRepos\\\\2012-dec14-react\\\\projectOne\\\\front-end\\\\src\\\\components\\\\createRequest.tsx\",\n    _s = $RefreshSig$();\n\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport '../css/createRequest.css';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useRef } from 'react';\nimport employeeService from '../services/employee.service';\nimport { changeRequest, getEmployee, getSeniorEmployee } from '../redux/actions';\nimport requestService from '../services/request.service';\nimport React from 'react';\n\nfunction CreateRequest() {\n  _s();\n\n  // get state, use react hooks\n  const employee = useSelector(state => state.employee); //const seniorEmployee = useSelector((state: EmployeeState) => state.seniorEmployee);\n\n  const request = useSelector(state => state.request);\n  const dispatch = useDispatch();\n  const history = useHistory(); // validity state\n\n  const [validity, setValidity] = React.useState({\n    isCreateDateValid: true,\n    isStartDateValid: true,\n    isEndDateValid: true,\n    isCostValid: true,\n    isLocationValid: true,\n    isDescriptionValid: true,\n    isJustificationValid: true\n  });\n  let [projectionState, setProjectionState] = React.useState(''); //refs for all input fields\n\n  const dateCreatedRef = useRef();\n  const projectionRef = useRef();\n  const availableRef = useRef();\n  const eventTypeRef = useRef();\n  const locationRef = useRef();\n  const gradingFormatRef = useRef();\n  const costRef = useRef();\n  const startDateRef = useRef();\n  const endDateRef = useRef(); //const gradeCutOffRef = useRef() as MutableRefObject<HTMLInputElement>;\n\n  const justificationRef = useRef();\n  const eventDescriptionRef = useRef(); //handle cancel button\n\n  function handleCancelButtonClick() {\n    history.push(\"/dashboard\");\n  } //handle submit button\n\n\n  async function handleSubmitButtonClick(e) {\n    e.preventDefault();\n    const newRequest = { ...request\n    };\n    newRequest.isUrgent = false;\n    const newEmployee = { ...employee\n    };\n\n    if (dateCreatedRef.current.value) {\n      newRequest.dateCreated = dateCreatedRef.current.value; // separate created date into usable numbers\n\n      const createdDateStringArray = dateCreatedRef.current.value.split('-');\n      const createdDateNumberArray = [];\n      createdDateStringArray.forEach(string => {\n        createdDateNumberArray.push(Number(string));\n      });\n      const createdDateDay = createdDateNumberArray[2]; // if valid, reset validity\n\n      setValidity(value => {\n        const newValue = { ...value,\n          isCreateDateValid: true\n        };\n        return newValue;\n      });\n\n      if (startDateRef.current.value) {\n        // separate start date into usable numbers\n        const startDateStringArray = startDateRef.current.value.split('-');\n        const startDateNumberArray = [];\n        startDateStringArray.forEach(string => {\n          startDateNumberArray.push(Number(string));\n        });\n        const differenceInMillis = Date.parse(`${startDateStringArray[1]}/${startDateStringArray[2]}/${startDateStringArray[0]}`) - Date.parse(`${createdDateStringArray[1]}/${createdDateStringArray[2]}/${createdDateStringArray[0]}`);\n        const differenceInDays = differenceInMillis / 86400000; //start date must be 7 days after creation date\n\n        if (startDateRef.current.value >= dateCreatedRef.current.value) {\n          if (differenceInDays >= 7) {\n            console.log('difference in days', differenceInDays);\n            newRequest.event.startDate = startDateRef.current.value;\n\n            if (differenceInDays < 14) {\n              console.log('Created day: ', createdDateDay);\n              newRequest.isUrgent = true;\n            }\n\n            console.log('is urgent?', newRequest.isUrgent); // if valid, reset validity\n\n            setValidity(value => {\n              const newValue = { ...value,\n                isStartDateValid: true\n              };\n              return newValue;\n            });\n\n            if (Number(costRef.current.value)) {\n              // check if number is greater than 0\n              if (Number(costRef.current.value) < 1) {\n                console.log('Error, please enter a valid cost.');\n              } else {\n                // change cost to covered cost\n                let coveredCost = 0;\n\n                switch (eventTypeRef.current.value) {\n                  case 'Universty Course':\n                    coveredCost = Number(costRef.current.value) * .8;\n                    break;\n\n                  case 'Seminar':\n                    coveredCost = Number(costRef.current.value) * .6;\n                    break;\n\n                  case 'Certification Prep Class':\n                    coveredCost = Number(costRef.current.value) * .75;\n                    break;\n\n                  case 'Certification':\n                    coveredCost = Number(costRef.current.value);\n                    break;\n\n                  case 'Technical Training':\n                    coveredCost = Number(costRef.current.value) * .3;\n                    break;\n\n                  case 'Other':\n                    coveredCost = Number(costRef.current.value) * .8;\n                    break;\n                } // check if available credit - cost < 0 --> projection is available credit\n                // available credit = 0\n\n\n                if (newEmployee.availableCredit - coveredCost <= 0) {\n                  newEmployee.availableCredit = 0;\n                  setProjectionState(projectionState += employee.availableCredit.toString());\n                  projectionRef.current.value = employee.availableCredit.toString();\n                } else {\n                  // else, projection is cost\n                  setProjectionState(projectionState += costRef.current.value);\n                  projectionRef.current.value = costRef.current.value; // available credit = available credit - cost\n\n                  newEmployee.availableCredit -= coveredCost;\n                }\n\n                newRequest.projection = Number(projectionRef.current.value);\n\n                if (Number(projectionRef.current.value) === 0) {\n                  console.log('Error, you have no available credit.');\n                } else {\n                  console.log('employee\\'s credit is going to be: ', newEmployee.availableCredit);\n                  newRequest.event.cost = Number(costRef.current.value); // if valid, reset validity\n\n                  setValidity(value => {\n                    const newValue = { ...value,\n                      isCostValid: true\n                    };\n                    return newValue;\n                  });\n\n                  if (endDateRef.current.value) {\n                    // make sure end date is on or after the start date\n                    if (endDateRef.current.value < startDateRef.current.value) {\n                      setValidity(value => {\n                        const newValue = { ...value,\n                          isEndDateValid: false\n                        };\n                        return newValue;\n                      });\n                      console.log('Error, please enter a valid end date.');\n                    } else {\n                      newRequest.event.endDate = endDateRef.current.value; // if valid, reset validity\n\n                      setValidity(value => {\n                        const newValue = { ...value,\n                          isEndDateValid: true\n                        };\n                        return newValue;\n                      });\n\n                      if (locationRef.current.value) {\n                        newRequest.event.location = locationRef.current.value; // if valid, reset validity\n\n                        setValidity(value => {\n                          const newValue = { ...value,\n                            isLocationValid: true\n                          };\n                          return newValue;\n                        });\n\n                        if (eventDescriptionRef.current.value) {\n                          newRequest.event.description = eventDescriptionRef.current.value; // if valid, reset validity\n\n                          setValidity(value => {\n                            const newValue = { ...value,\n                              isDescriptionValid: true\n                            };\n                            return newValue;\n                          });\n\n                          if (eventTypeRef.current.value) {\n                            newRequest.event.eventType = eventTypeRef.current.value;\n\n                            if (justificationRef.current.value) {\n                              newRequest.justification = justificationRef.current.value; // if valid, reset validity\n\n                              setValidity(value => {\n                                const newValue = { ...value,\n                                  isJustificationValid: true\n                                };\n                                return newValue;\n                              });\n\n                              if (gradingFormatRef.current.value) {\n                                newRequest.event.gradingFormat = gradingFormatRef.current.value;\n                                newRequest.id = Date.now();\n                                newRequest.statusOf = 'Pending';\n                                newRequest.demographics = employee.demographics;\n                                newRequest.username = employee.username; // change request state\n\n                                dispatch(changeRequest(newRequest)); //get senior employee of current employee\n\n                                let arrayReturned = await employeeService.getSeniorEmployeeByRole(newEmployee.role).then(employees => {\n                                  return employees;\n                                }).catch(() => {\n                                  console.log('Error, could not get senior employee!');\n                                });\n                                let newArray = [];\n\n                                if (arrayReturned) {\n                                  for (const prop in arrayReturned) {\n                                    newArray.push(arrayReturned[prop]);\n                                  }\n                                }\n\n                                const newSeniorEmployee = newArray[0]; // add request to database\n\n                                requestService.addRequest(newRequest).then().catch(() => {\n                                  console.log('Error: could not add request to database.');\n                                });\n                                newEmployee.requests.push(newRequest);\n                                newSeniorEmployee.requests.push(newRequest); // make changes to DB and update our store\n\n                                employeeService.updateEmployee(newEmployee).then(employeeReturned => {\n                                  console.log('employee dispatched to employee state: ', employeeReturned);\n                                  dispatch(getEmployee(employeeReturned));\n                                }).catch(() => {\n                                  console.log('Employee could not be updated!');\n                                });\n                                employeeService.updateEmployee(newSeniorEmployee).then(employeeReturned => {\n                                  console.log('employee dispatched to senioremployee state: ', employeeReturned);\n                                  dispatch(getSeniorEmployee(employeeReturned));\n                                  history.push(\"/dashboard\");\n                                }).catch(() => {\n                                  console.log('Employee could not be updated!');\n                                });\n                              }\n                            } else {\n                              setValidity(value => {\n                                const newValue = { ...value,\n                                  isJustificationValid: false\n                                };\n                                return newValue;\n                              });\n                              console.log('Error, please enter a justification.');\n                            }\n                          } else {\n                            console.log('Error, please enter an event type.');\n                          }\n                        } else {\n                          setValidity(value => {\n                            const newValue = { ...value,\n                              isDescriptionValid: false\n                            };\n                            return newValue;\n                          });\n                          console.log('Error, please enter an event description.');\n                        }\n                      } else {\n                        setValidity(value => {\n                          const newValue = { ...value,\n                            isLocationValid: false\n                          };\n                          return newValue;\n                        });\n                        console.log('Error, please enter a location.');\n                      }\n                    }\n                  } else {\n                    setValidity(value => {\n                      const newValue = { ...value,\n                        isEndDateValid: false\n                      };\n                      return newValue;\n                    });\n                    console.log('Error, please enter an end date.');\n                  }\n                }\n              }\n            } else {\n              setValidity(value => {\n                const newValue = { ...value,\n                  isCostValid: false\n                };\n                return newValue;\n              });\n              console.log('Error, please enter a valid number for cost.');\n            }\n          } else {\n            setValidity(value => {\n              const newValue = { ...value,\n                isStartDateValid: false\n              };\n              return newValue;\n            });\n            console.log('Error, please enter a valid day at least 7 days after created day.');\n          }\n        } else {\n          setValidity(value => {\n            const newValue = { ...value,\n              isStartDateValid: false\n            };\n            return newValue;\n          });\n          console.log('Error, please enter a start date a week in advance or greater.');\n        }\n      } else {\n        setValidity(value => {\n          const newValue = { ...value,\n            isStartDateValid: false\n          };\n          return newValue;\n        });\n        console.log('Error, please enter a valid day at least 7 days after created day.');\n      }\n    } else {\n      setValidity(value => {\n        const newValue = { ...value,\n          isCreateDateValid: false\n        };\n        return newValue;\n      });\n      console.log('Error, please enter a creation date.');\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    id: \"createRequestContainer\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      id: \"reimbursementForm\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        lg: 8,\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          id: \"reimbursementHeader\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            md: \"10\",\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Tuition Reimbursement Form\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          id: \"reimbursementBody\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n                className: \"justify-content-md-center\",\n                children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  controlId: \"formDateCreated\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Today's Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 348,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"date\",\n                    ref: dateCreatedRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 349,\n                    columnNumber: 45\n                  }, this), validity.isCreateDateValid ? null : /*#__PURE__*/_jsxDEV(Form.Text, {\n                    className: \"alertText\",\n                    children: \"Error: Please enter a valid creation date.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 350,\n                    columnNumber: 82\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 347,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"First Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 357,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: employee.demographics.firstname,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 358,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Last Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 359,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: employee.demographics.lastname,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 360,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 356,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Phone Number\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 363,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: employee.demographics.phone,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 364,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Email\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 365,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: employee.demographics.email,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 366,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Available Credit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 371,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    ref: availableRef,\n                    placeholder: employee.availableCredit.toString(),\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 372,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Cost\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 373,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"number\",\n                    min: 1,\n                    max: 1000,\n                    ref: costRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 374,\n                    columnNumber: 41\n                  }, this), validity.isCostValid ? null : /*#__PURE__*/_jsxDEV(Form.Text, {\n                    className: \"alertText\",\n                    children: \"Error: Please enter a valid cost.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 375,\n                    columnNumber: 72\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Projected Reimbursement\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 378,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    ref: projectionRef,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 379,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Event Type\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 382,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"select\",\n                    ref: eventTypeRef,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"University Course\",\n                      children: \"University Course\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 384,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Seminar\",\n                      children: \"Seminar\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 385,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Certification Prep Class\",\n                      children: \"Certification Prep Class\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 386,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Certification\",\n                      children: \"Certification\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 387,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Technical Training\",\n                      children: \"Technical Training\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 388,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Other\",\n                      children: \"Other\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 389,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 383,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Start Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 391,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"date\",\n                    ref: startDateRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 392,\n                    columnNumber: 41\n                  }, this), validity.isStartDateValid ? null : /*#__PURE__*/_jsxDEV(Form.Text, {\n                    className: \"alertText\",\n                    children: \"Error: Please enter a valid start date that is at least a week from create date.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 393,\n                    columnNumber: 77\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"End Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 396,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"date\",\n                    ref: endDateRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 397,\n                    columnNumber: 41\n                  }, this), validity.isEndDateValid ? null : /*#__PURE__*/_jsxDEV(Form.Text, {\n                    className: \"alertText\",\n                    children: \"Error: Please enter a valid end date.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 398,\n                    columnNumber: 75\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Grading Format\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 403,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    as: \"select\",\n                    ref: gradingFormatRef,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Letter\",\n                      children: \"Letter\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 405,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Percentage\",\n                      children: \"Percentage\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 406,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"None\",\n                      children: \"None\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 407,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 404,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Location\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 409,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    ref: locationRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 410,\n                    columnNumber: 41\n                  }, this), validity.isLocationValid ? null : /*#__PURE__*/_jsxDEV(Form.Text, {\n                    className: \"alertText\",\n                    children: \"Error: Please enter a valid location.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 411,\n                    columnNumber: 76\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Event Description\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 418,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"textarea\",\n                    rows: 3,\n                    ref: eventDescriptionRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 419,\n                    columnNumber: 41\n                  }, this), validity.isDescriptionValid ? null : /*#__PURE__*/_jsxDEV(Form.Text, {\n                    className: \"alertText\",\n                    children: \"Error: Please enter a valid description.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 420,\n                    columnNumber: 79\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 417,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Justification\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 425,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"textarea\",\n                    rows: 3,\n                    ref: justificationRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 426,\n                    columnNumber: 41\n                  }, this), validity.isJustificationValid ? null : /*#__PURE__*/_jsxDEV(Form.Text, {\n                    className: \"alertText\",\n                    children: \"Error: Please enter a valid justification.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 427,\n                    columnNumber: 81\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 424,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 416,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                id: \"createRequestButtonRow\",\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  className: \"d-flex justify-content-center\",\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"danger\",\n                    onClick: handleCancelButtonClick,\n                    children: \"Cancel\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 434,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  className: \"d-flex justify-content-center\",\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"warning\",\n                    type: \"submit\",\n                    onClick: handleSubmitButtonClick,\n                    children: \"Submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 439,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 438,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateRequest, \"lVpNvOInGR2kspq/R6yd6kvegUE=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useHistory];\n});\n\n_c = CreateRequest;\nexport default CreateRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateRequest\");","map":{"version":3,"sources":["C:/Users/cynth/GitRepos/2012-dec14-react/projectOne/front-end/src/components/createRequest.tsx"],"names":["Container","Form","Button","Row","Col","useHistory","useDispatch","useSelector","useRef","employeeService","changeRequest","getEmployee","getSeniorEmployee","requestService","React","CreateRequest","employee","state","request","dispatch","history","validity","setValidity","useState","isCreateDateValid","isStartDateValid","isEndDateValid","isCostValid","isLocationValid","isDescriptionValid","isJustificationValid","projectionState","setProjectionState","dateCreatedRef","projectionRef","availableRef","eventTypeRef","locationRef","gradingFormatRef","costRef","startDateRef","endDateRef","justificationRef","eventDescriptionRef","handleCancelButtonClick","push","handleSubmitButtonClick","e","preventDefault","newRequest","isUrgent","newEmployee","current","value","dateCreated","createdDateStringArray","split","createdDateNumberArray","forEach","string","Number","createdDateDay","newValue","startDateStringArray","startDateNumberArray","differenceInMillis","Date","parse","differenceInDays","console","log","event","startDate","coveredCost","availableCredit","toString","projection","cost","endDate","location","description","eventType","justification","gradingFormat","id","now","statusOf","demographics","username","arrayReturned","getSeniorEmployeeByRole","role","then","employees","catch","newArray","prop","newSeniorEmployee","addRequest","requests","updateEmployee","employeeReturned","firstname","lastname","phone","email"],"mappings":"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","sourcesContent":["import Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport '../css/createRequest.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { EmployeeState, RequestState } from '../redux/reducer';\r\nimport { MutableRefObject, SyntheticEvent, useRef } from 'react';\r\nimport employeeService from '../services/employee.service';\r\nimport { Employee } from '../models/employee.model';\r\nimport { changeRequest, getEmployee, getSeniorEmployee } from '../redux/actions';\r\nimport requestService from '../services/request.service';\r\nimport React from 'react';\r\n\r\nfunction CreateRequest() {\r\n    // get state, use react hooks\r\n    const employee = useSelector((state: EmployeeState) => state.employee);\r\n    //const seniorEmployee = useSelector((state: EmployeeState) => state.seniorEmployee);\r\n    const request = useSelector((state: RequestState) => state.request);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    // validity state\r\n    const [validity, setValidity] =  React.useState({\r\n        isCreateDateValid : true,\r\n        isStartDateValid : true,\r\n        isEndDateValid : true,\r\n        isCostValid : true,\r\n        isLocationValid : true,\r\n        isDescriptionValid : true,\r\n        isJustificationValid : true\r\n    });\r\n\r\n    let [projectionState, setProjectionState] = React.useState('');\r\n\r\n    //refs for all input fields\r\n    const dateCreatedRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    const projectionRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    const availableRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    const eventTypeRef = useRef() as MutableRefObject<HTMLSelectElement>;\r\n    const locationRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    const gradingFormatRef = useRef() as MutableRefObject<HTMLSelectElement>;\r\n    const costRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    const startDateRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    const endDateRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    //const gradeCutOffRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    const justificationRef = useRef() as MutableRefObject<HTMLTextAreaElement>;\r\n    const eventDescriptionRef = useRef() as MutableRefObject<HTMLTextAreaElement>;\r\n\r\n    //handle cancel button\r\n    function handleCancelButtonClick() {\r\n        history.push(\"/dashboard\");\r\n    }\r\n\r\n    //handle submit button\r\n    async function handleSubmitButtonClick(e: SyntheticEvent) {\r\n        e.preventDefault();\r\n        const newRequest = {...request};\r\n        newRequest.isUrgent = false;\r\n        const newEmployee = {...employee};\r\n        if (dateCreatedRef.current.value) {\r\n            newRequest.dateCreated = dateCreatedRef.current.value;\r\n\r\n            // separate created date into usable numbers\r\n            const createdDateStringArray = (dateCreatedRef.current.value).split('-');\r\n            const createdDateNumberArray: number[] = [];\r\n            createdDateStringArray.forEach( string => {\r\n                createdDateNumberArray.push(Number(string));\r\n            });\r\n            const createdDateDay = createdDateNumberArray[2];\r\n\r\n            // if valid, reset validity\r\n            setValidity(value => {\r\n                const newValue = {...value, isCreateDateValid : true};\r\n                return newValue;\r\n            });\r\n\r\n            if (startDateRef.current.value) {\r\n                // separate start date into usable numbers\r\n                const startDateStringArray = (startDateRef.current.value).split('-');\r\n                const startDateNumberArray: number[] = [];\r\n                startDateStringArray.forEach( string => {\r\n                    startDateNumberArray.push(Number(string));\r\n                });\r\n                const differenceInMillis = Date.parse(`${startDateStringArray[1]}/${startDateStringArray[2]}/${startDateStringArray[0]}`) - Date.parse(`${createdDateStringArray[1]}/${createdDateStringArray[2]}/${createdDateStringArray[0]}`);\r\n                const differenceInDays = differenceInMillis / 86400000;\r\n                \r\n                //start date must be 7 days after creation date\r\n                if (startDateRef.current.value >= dateCreatedRef.current.value) {\r\n                    if (differenceInDays >= 7) {\r\n                        console.log('difference in days', differenceInDays);\r\n                        newRequest.event.startDate = startDateRef.current.value;\r\n                        if (differenceInDays < 14){\r\n                            console.log('Created day: ', createdDateDay);\r\n                            newRequest.isUrgent = true;\r\n                        }\r\n                        console.log('is urgent?', newRequest.isUrgent);\r\n\r\n                        // if valid, reset validity\r\n                        setValidity(value => {\r\n                            const newValue = {...value, isStartDateValid : true};\r\n                            return newValue;\r\n                        });\r\n\r\n                        if (Number(costRef.current.value)) {\r\n                            // check if number is greater than 0\r\n                            if (Number(costRef.current.value) < 1) {\r\n                                console.log('Error, please enter a valid cost.');\r\n                            } else {\r\n                                // change cost to covered cost\r\n                                let coveredCost = 0;\r\n                                switch (eventTypeRef.current.value) {\r\n                                    case 'Universty Course':\r\n                                        coveredCost = Number(costRef.current.value)  * .8;\r\n                                        break;\r\n                                    case 'Seminar':\r\n                                        coveredCost = Number(costRef.current.value)  * .6;\r\n                                        break;\r\n                                    case 'Certification Prep Class':\r\n                                        coveredCost = Number(costRef.current.value)  * .75;\r\n                                        break;\r\n                                    case 'Certification':\r\n                                        coveredCost = Number(costRef.current.value);\r\n                                        break;\r\n                                    case 'Technical Training':\r\n                                        coveredCost = Number(costRef.current.value)  * .3;\r\n                                        break;\r\n                                    case 'Other':\r\n                                        coveredCost = Number(costRef.current.value)  * .8;\r\n                                        break;\r\n\r\n                                }\r\n                                // check if available credit - cost < 0 --> projection is available credit\r\n                                // available credit = 0\r\n                                if ((newEmployee.availableCredit - coveredCost) <= 0) {\r\n                                    newEmployee.availableCredit = 0;\r\n                                    setProjectionState(projectionState += employee.availableCredit.toString());\r\n                                    projectionRef.current.value = employee.availableCredit.toString();\r\n                                } else {\r\n                                    // else, projection is cost\r\n                                    setProjectionState(projectionState += costRef.current.value);\r\n                                    projectionRef.current.value = costRef.current.value;\r\n                                    // available credit = available credit - cost\r\n                                    newEmployee.availableCredit -= coveredCost;\r\n                                }\r\n                                newRequest.projection = Number(projectionRef.current.value);\r\n\r\n                                if (Number(projectionRef.current.value) === 0) {\r\n                                    console.log('Error, you have no available credit.');\r\n                                } else {\r\n                                    console.log('employee\\'s credit is going to be: ', newEmployee.availableCredit);\r\n                                    newRequest.event.cost = Number(costRef.current.value);\r\n\r\n                                    // if valid, reset validity\r\n                                    setValidity(value => {\r\n                                        const newValue = {...value, isCostValid : true};\r\n                                        return newValue;\r\n                                    });\r\n\r\n                                    if (endDateRef.current.value) {\r\n                                        // make sure end date is on or after the start date\r\n                                        if (endDateRef.current.value < startDateRef.current.value) {\r\n                                            setValidity(value => {\r\n                                                const newValue = {...value, isEndDateValid : false};\r\n                                                return newValue;\r\n                                            });\r\n                                            console.log('Error, please enter a valid end date.');\r\n                                        } else {\r\n                                            newRequest.event.endDate = endDateRef.current.value;\r\n                                            // if valid, reset validity\r\n                                        setValidity(value => {\r\n                                            const newValue = {...value, isEndDateValid : true};\r\n                                            return newValue;\r\n                                        });\r\n\r\n                                        if (locationRef.current.value) {\r\n                                            newRequest.event.location = locationRef.current.value;\r\n\r\n                                            // if valid, reset validity\r\n                                            setValidity(value => {\r\n                                                const newValue = {...value, isLocationValid : true};\r\n                                                return newValue;\r\n                                            });\r\n\r\n                                            if (eventDescriptionRef.current.value) {\r\n                                                newRequest.event.description = eventDescriptionRef.current.value;\r\n\r\n                                                // if valid, reset validity\r\n                                                setValidity(value => {\r\n                                                    const newValue = {...value, isDescriptionValid : true};\r\n                                                    return newValue;\r\n                                                });\r\n\r\n                                                if (eventTypeRef.current.value) {\r\n                                                    newRequest.event.eventType = eventTypeRef.current.value;\r\n\r\n\r\n                                                    if (justificationRef.current.value) {\r\n                                                        newRequest.justification = justificationRef.current.value;\r\n\r\n                                                        // if valid, reset validity\r\n                                                        setValidity(value => {\r\n                                                            const newValue = {...value, isJustificationValid : true};\r\n                                                            return newValue;\r\n                                                        });\r\n                                                        if (gradingFormatRef.current.value) {\r\n                                                            newRequest.event.gradingFormat = gradingFormatRef.current.value;\r\n                                                            newRequest.id = Date.now();\r\n                                                            newRequest.statusOf = 'Pending';\r\n                                                            newRequest.demographics = employee.demographics;\r\n                                                            newRequest.username = employee.username;\r\n\r\n                                                            // change request state\r\n                                                            dispatch(changeRequest(newRequest));\r\n                                                            //get senior employee of current employee\r\n                                                            let arrayReturned = await employeeService.getSeniorEmployeeByRole(newEmployee.role).then( employees => {\r\n                                                                return employees;\r\n                                                            }).catch(() => {\r\n                                                                console.log('Error, could not get senior employee!');\r\n                                                            });\r\n                                                            let newArray: Employee[] = [];\r\n                                                            if (arrayReturned) {\r\n                                                                for (const prop in arrayReturned) {\r\n                                                                        newArray.push(arrayReturned[prop]);\r\n                                                                    }\r\n                                                            }\r\n                                                            const newSeniorEmployee = newArray[0];\r\n                                                            \r\n                                                            // add request to database\r\n                                                            requestService.addRequest(newRequest).then().catch( () => {\r\n                                                                console.log('Error: could not add request to database.');\r\n                                                            });\r\n\r\n                                                            newEmployee.requests.push(newRequest);\r\n                                                            newSeniorEmployee.requests.push(newRequest);\r\n                                                            // make changes to DB and update our store\r\n                                                            employeeService.updateEmployee(newEmployee).then( employeeReturned => {\r\n                                                                console.log('employee dispatched to employee state: ', employeeReturned);\r\n                                                                dispatch(getEmployee(employeeReturned));\r\n                                                            }).catch( () => {\r\n                                                                console.log('Employee could not be updated!');\r\n                                                            });\r\n                                                            employeeService.updateEmployee(newSeniorEmployee).then( employeeReturned => {\r\n                                                                console.log('employee dispatched to senioremployee state: ', employeeReturned);\r\n                                                                dispatch(getSeniorEmployee(employeeReturned));\r\n                                                                history.push(\"/dashboard\");\r\n                                                            }).catch( () => {\r\n                                                                console.log('Employee could not be updated!');\r\n                                                            });\r\n                                                        }\r\n                                                    } else {\r\n                                                        setValidity(value => {\r\n                                                            const newValue = {...value, isJustificationValid : false};\r\n                                                            return newValue;\r\n                                                        });\r\n                                                        console.log('Error, please enter a justification.');\r\n                                                    }\r\n                                                } else {\r\n                                                    console.log('Error, please enter an event type.');\r\n                                                }\r\n                                            } else {\r\n                                                setValidity(value => {\r\n                                                    const newValue = {...value, isDescriptionValid : false};\r\n                                                    return newValue;\r\n                                                });\r\n                                                console.log('Error, please enter an event description.');\r\n                                            }\r\n                                        } else {\r\n                                            setValidity(value => {\r\n                                                const newValue = {...value, isLocationValid : false};\r\n                                                return newValue;\r\n                                            });\r\n                                            console.log('Error, please enter a location.');\r\n                                        }\r\n                                        }\r\n                                        \r\n                                        \r\n                                    } else {\r\n                                        setValidity(value => {\r\n                                            const newValue = {...value, isEndDateValid : false};\r\n                                            return newValue;\r\n                                        });\r\n                                        console.log('Error, please enter an end date.');\r\n                                    }\r\n                                }\r\n                                \r\n                            }\r\n                \r\n                        } else {\r\n                            setValidity(value => {\r\n                                const newValue = {...value, isCostValid : false};\r\n                                return newValue;\r\n                            });\r\n                            console.log('Error, please enter a valid number for cost.');\r\n                        }\r\n                    } else {\r\n                        setValidity(value => {\r\n                            const newValue = {...value, isStartDateValid : false};\r\n                            return newValue;\r\n                        });\r\n                        console.log('Error, please enter a valid day at least 7 days after created day.');\r\n                    }\r\n                } else {\r\n                    setValidity(value => {\r\n                        const newValue = {...value, isStartDateValid : false};\r\n                        return newValue;\r\n                    });\r\n                    console.log('Error, please enter a start date a week in advance or greater.');\r\n                }\r\n                \r\n            } else {\r\n                setValidity(value => {\r\n                    const newValue = {...value, isStartDateValid : false};\r\n                    return newValue;\r\n                });\r\n                console.log('Error, please enter a valid day at least 7 days after created day.');\r\n            }\r\n        } else {\r\n            setValidity(value => {\r\n                const newValue = {...value, isCreateDateValid : false};\r\n                return newValue;\r\n            });\r\n            console.log('Error, please enter a creation date.');\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <Container id=\"createRequestContainer\">\r\n            <Row id=\"reimbursementForm\">\r\n                <Col />\r\n                <Col lg={8}>\r\n                    <Row id=\"reimbursementHeader\">\r\n                        <Col />\r\n                        <Col md=\"10\" className=\"text-center\">\r\n                            <h1>Tuition Reimbursement Form</h1>\r\n                        </Col>\r\n                        <Col />\r\n                    </Row>\r\n                    <Row id=\"reimbursementBody\">\r\n                        <Col>\r\n                            <Form>\r\n                                <Form.Row className=\"justify-content-md-center\">\r\n                                    <Form.Group as={Col} controlId=\"formDateCreated\">\r\n                                            <Form.Label>Today's Date</Form.Label>\r\n                                            <Form.Control type=\"date\" ref={dateCreatedRef}/>\r\n                                            {validity.isCreateDateValid ? null : <Form.Text className=\"alertText\">\r\n                                            Error: Please enter a valid creation date.\r\n                                            </Form.Text>}\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>First Name</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={employee.demographics.firstname} readOnly/>\r\n                                        <Form.Label>Last Name</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={employee.demographics.lastname} readOnly/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Phone Number</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={employee.demographics.phone} readOnly/>\r\n                                        <Form.Label>Email</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={employee.demographics.email} readOnly/>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Available Credit</Form.Label>\r\n                                        <Form.Control type=\"text\" ref={availableRef} placeholder={employee.availableCredit.toString()} readOnly/>\r\n                                        <Form.Label>Cost</Form.Label>\r\n                                        <Form.Control type=\"number\" min={1} max={1000} ref={costRef} />\r\n                                        {validity.isCostValid ? null : <Form.Text className=\"alertText\">\r\n                                            Error: Please enter a valid cost.\r\n                                            </Form.Text>}\r\n                                        <Form.Label>Projected Reimbursement</Form.Label>\r\n                                        <Form.Control type=\"text\" ref={projectionRef} readOnly />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                    <Form.Label>Event Type</Form.Label>\r\n                                        <Form.Control as=\"select\" ref={eventTypeRef}>\r\n                                            <option value=\"University Course\">University Course</option>\r\n                                            <option value=\"Seminar\">Seminar</option>\r\n                                            <option value=\"Certification Prep Class\">Certification Prep Class</option>\r\n                                            <option value=\"Certification\">Certification</option>\r\n                                            <option value=\"Technical Training\">Technical Training</option>\r\n                                            <option value=\"Other\">Other</option>\r\n                                        </Form.Control>\r\n                                        <Form.Label>Start Date</Form.Label>\r\n                                        <Form.Control type=\"date\" ref={startDateRef} />\r\n                                        {validity.isStartDateValid ? null : <Form.Text className=\"alertText\">\r\n                                            Error: Please enter a valid start date that is at least a week from create date.\r\n                                            </Form.Text>}\r\n                                        <Form.Label>End Date</Form.Label>\r\n                                        <Form.Control type=\"date\" ref={endDateRef} />\r\n                                        {validity.isEndDateValid ? null : <Form.Text className=\"alertText\">\r\n                                            Error: Please enter a valid end date.\r\n                                            </Form.Text>}\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Grading Format</Form.Label>\r\n                                        <Form.Control type=\"text\" as=\"select\" ref={gradingFormatRef}>\r\n                                            <option value=\"Letter\">Letter</option>\r\n                                            <option value=\"Percentage\">Percentage</option>\r\n                                            <option value=\"None\">None</option>\r\n                                        </Form.Control>\r\n                                        <Form.Label>Location</Form.Label>\r\n                                        <Form.Control type=\"text\" ref={locationRef} />\r\n                                        {validity.isLocationValid ? null : <Form.Text className=\"alertText\">\r\n                                            Error: Please enter a valid location.\r\n                                            </Form.Text>}\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Event Description</Form.Label>\r\n                                        <Form.Control  as=\"textarea\" rows={3} ref={eventDescriptionRef} />\r\n                                        {validity.isDescriptionValid ? null : <Form.Text className=\"alertText\">\r\n                                            Error: Please enter a valid description.\r\n                                            </Form.Text>}\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Justification</Form.Label>\r\n                                        <Form.Control as=\"textarea\" rows={3} ref={justificationRef} />\r\n                                        {validity.isJustificationValid ? null : <Form.Text className=\"alertText\">\r\n                                            Error: Please enter a valid justification.\r\n                                            </Form.Text>}\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row id=\"createRequestButtonRow\">\r\n                                    <Col className=\"d-flex justify-content-center\">\r\n                                        <Button variant=\"danger\" onClick={handleCancelButtonClick}>\r\n                                            Cancel\r\n                                        </Button>\r\n                                    </Col>\r\n                                    <Col className=\"d-flex justify-content-center\">\r\n                                        <Button variant=\"warning\" type=\"submit\" onClick={handleSubmitButtonClick}>\r\n                                            Submit\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Form.Row>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n                <Col />\r\n            </Row>\r\n        </Container>\r\n      );\r\n}\r\n\r\nexport default CreateRequest;"]},"metadata":{},"sourceType":"module"}