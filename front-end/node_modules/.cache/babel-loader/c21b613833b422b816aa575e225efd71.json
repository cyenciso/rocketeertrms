{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\cynth\\\\GitRepos\\\\2012-dec14-react\\\\projectOne\\\\front-end\\\\src\\\\components\\\\createRequest.tsx\",\n    _s = $RefreshSig$();\n\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport '../css/createRequest.css';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useRef } from 'react';\nimport employeeService from '../services/employee.service';\nimport { changeRequest, getEmployee, getSeniorEmployee } from '../redux/actions';\nimport requestService from '../services/request.service';\n\nfunction CreateRequest() {\n  _s();\n\n  // get state, use react hooks\n  const employee = useSelector(state => state.employee); //const seniorEmployee = useSelector((state: EmployeeState) => state.seniorEmployee);\n\n  const request = useSelector(state => state.request);\n  const dispatch = useDispatch();\n  const history = useHistory(); //refs for all input fields\n\n  const dateCreatedRef = useRef();\n  const projectionRef = useRef();\n  const availableRef = useRef();\n  const eventTypeRef = useRef();\n  const locationRef = useRef();\n  const gradingFormatRef = useRef();\n  const costRef = useRef();\n  const startDateRef = useRef();\n  const endDateRef = useRef(); //const gradeCutOffRef = useRef() as MutableRefObject<HTMLInputElement>;\n\n  const justificationRef = useRef();\n  const eventDescriptionRef = useRef(); // validation errors\n\n  let iscreateDateValid;\n  let isStartDateValid;\n  let isEndDateValid = true;\n  let isCostValid = true;\n  let isLocationValid = true;\n  let isDescriptionValid = true;\n  let isJustificationValid = true;\n\n  function resetValidation() {\n    iscreateDateValid = true;\n    isStartDateValid = true;\n    isEndDateValid = true;\n    isCostValid = true;\n    isLocationValid = true;\n    isDescriptionValid = true;\n    isJustificationValid = true;\n  }\n\n  useEffect(() => {\n    console.log('hello');\n  }, [iscreateDateValid, isStartDateValid, isEndDateValid, isCostValid, isLocationValid, isDescriptionValid, isJustificationValid]); //handle cancel button\n\n  function handleCancelButtonClick() {\n    history.push(\"/dashboard\");\n  } //handle submit button\n\n\n  async function handleSubmitButtonClick(e) {\n    e.preventDefault();\n    const newRequest = { ...request\n    };\n    const newEmployee = { ...employee\n    };\n\n    if (dateCreatedRef.current.value) {\n      newRequest.dateCreated = dateCreatedRef.current.value; // separate created date into usable numbers\n\n      const createdDateStringArray = dateCreatedRef.current.value.split('-');\n      const createdDateNumberArray = [];\n      createdDateStringArray.forEach(string => {\n        createdDateNumberArray.push(Number(string));\n      });\n      const createdDateYear = createdDateNumberArray[0];\n      const createdDateMonth = createdDateNumberArray[1];\n      const createdDateDay = createdDateNumberArray[2];\n\n      if (startDateRef.current.value) {\n        // separate start date into usable numbers\n        const startDateStringArray = startDateRef.current.value.split('-');\n        const startDateNumberArray = [];\n        startDateStringArray.forEach(string => {\n          startDateNumberArray.push(Number(string));\n        });\n        const startDateYear = startDateNumberArray[0];\n        const startDateMonth = startDateNumberArray[1];\n        const startDateDay = startDateNumberArray[2];\n        const differenceInMillis = Date.parse(`${startDateStringArray[1]}/${startDateStringArray[2]}/${startDateStringArray[0]}`) - Date.parse(`${createdDateStringArray[1]}/${createdDateStringArray[2]}/${createdDateStringArray[0]}`);\n        const differenceInDays = differenceInMillis / 86400000; //start date must be 7 days after creation date\n\n        if (startDateYear > createdDateYear) {\n          newRequest.event.startDate = startDateRef.current.value;\n        } else if (startDateYear === createdDateYear) {\n          //check month\n          if (startDateMonth > createdDateMonth) {\n            newRequest.event.startDate = startDateRef.current.value;\n          } else if (startDateMonth === createdDateMonth) {\n            //check day\n            if (differenceInDays >= 7) {\n              newRequest.event.startDate = startDateRef.current.value;\n\n              if (differenceInDays < 14) {\n                console.log('Created day: ', createdDateDay);\n                newRequest.isUrgent = true;\n              }\n\n              console.log('is urgent?', newRequest.isUrgent);\n\n              if (Number(costRef.current.value)) {\n                // check if number is greater than 0\n                if (Number(costRef.current.value) < 1) {\n                  console.log('Error, please enter a valid cost.');\n                } else {\n                  // check if available credit - cost < 0 --> projection is available credit\n                  // available credit = 0\n                  if (newEmployee.availableCredit - Number(costRef.current.value) <= 0) {\n                    newEmployee.availableCredit = 0;\n                    projectionRef.current.value = employee.availableCredit.toString();\n                  } else {\n                    // else, projection is cost\n                    projectionRef.current.value = costRef.current.value; // available credit = available credit - cost\n\n                    newEmployee.availableCredit -= Number(costRef.current.value);\n                  }\n\n                  newRequest.projection = Number(projectionRef.current.value);\n\n                  if (Number(projectionRef.current.value) === 0) {\n                    console.log('Error, you have no available credit.');\n                  } else {\n                    console.log('employee\\'s credit is going to be: ', newEmployee.availableCredit);\n                    newRequest.event.cost = Number(costRef.current.value);\n\n                    if (endDateRef.current.value) {\n                      // make sure end date is on or after the start date\n                      if (endDateRef.current.value < startDateRef.current.value) {\n                        console.log('Error, please enter a valid end date.');\n                      } else {\n                        newRequest.event.endDate = endDateRef.current.value;\n                      }\n\n                      if (locationRef.current.value) {\n                        newRequest.event.location = locationRef.current.value;\n\n                        if (eventDescriptionRef.current.value) {\n                          newRequest.event.description = eventDescriptionRef.current.value;\n\n                          if (eventTypeRef.current.value) {\n                            newRequest.event.eventType = eventTypeRef.current.value;\n\n                            if (justificationRef.current.value) {\n                              newRequest.justification = justificationRef.current.value;\n\n                              if (gradingFormatRef.current.value) {\n                                newRequest.event.gradingFormat = gradingFormatRef.current.value;\n                                newRequest.id = Date.now();\n                                newRequest.statusOf = 'Pending';\n                                newRequest.demographics = employee.demographics;\n                                newRequest.username = employee.username; // change request state\n\n                                dispatch(changeRequest(newRequest)); //get senior employee of current employee\n\n                                let arrayReturned = await employeeService.getSeniorEmployeeByRole(newEmployee.role).then(employees => {\n                                  return employees;\n                                }).catch(() => {\n                                  console.log('Error, could not get senior employee!');\n                                });\n                                let newArray = [];\n\n                                if (arrayReturned) {\n                                  for (const prop in arrayReturned) {\n                                    newArray.push(arrayReturned[prop]);\n                                  }\n                                }\n\n                                const newSeniorEmployee = newArray[0]; // add request to database\n\n                                requestService.addRequest(newRequest).then().catch(() => {\n                                  console.log('Error: could not add request to database.');\n                                });\n                                newEmployee.requests.push(newRequest);\n                                newSeniorEmployee.requests.push(newRequest); // make changes to DB and update our store\n\n                                employeeService.updateEmployee(newEmployee).then(employeeReturned => {\n                                  console.log('employee dispatched to employee state: ', employeeReturned);\n                                  dispatch(getEmployee(employeeReturned));\n                                }).catch(() => {\n                                  console.log('Employee could not be updated!');\n                                });\n                                employeeService.updateEmployee(newSeniorEmployee).then(employeeReturned => {\n                                  console.log('employee dispatched to senioremployee state: ', employeeReturned);\n                                  dispatch(getSeniorEmployee(employeeReturned));\n                                  history.push(\"/dashboard\");\n                                }).catch(() => {\n                                  console.log('Employee could not be updated!');\n                                });\n                              }\n                            } else {\n                              isJustificationValid = false;\n                              console.log('Error, please enter a justification.');\n                            }\n                          } else {\n                            console.log('Error, please enter an event type.');\n                          }\n                        } else {\n                          isDescriptionValid = false;\n                          console.log('Error, please enter an event description.');\n                        }\n                      } else {\n                        isLocationValid = false;\n                        console.log('Error, please enter a location.');\n                      }\n                    } else {\n                      isEndDateValid = false;\n                      console.log('Error, please enter a end date.');\n                    }\n                  }\n                }\n              } else {\n                isCostValid = false;\n                console.log('Error, please enter a valid number for cost.');\n              }\n            } else {\n              isStartDateValid = false;\n              console.log('Error, please enter a valid day at least 7 days after created day.');\n            }\n          } else {\n            isStartDateValid = false;\n            console.log('Error, please enter a valid month.');\n          }\n        } else {\n          isStartDateValid = false;\n          console.log('Error, please enter a valid year.');\n        }\n      } else {\n        isStartDateValid = false;\n        console.log('Error, please enter a start date.');\n      }\n    } else {\n      iscreateDateValid = false;\n      console.log('Error, please enter a creation date.');\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    id: \"createRequestContainer\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      id: \"reimbursementForm\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        lg: 8,\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          id: \"reimbursementHeader\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            md: \"10\",\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Tuition Reimbursement Form\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          id: \"reimbursementBody\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n                className: \"justify-content-md-center\",\n                children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  controlId: \"formDateCreated\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Today's Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 279,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"date\",\n                    ref: dateCreatedRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 280,\n                    columnNumber: 45\n                  }, this), !iscreateDateValid ? /*#__PURE__*/_jsxDEV(Form.Text, {\n                    className: \"alertText\",\n                    children: \"Error: Please enter a valid creation date.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 281,\n                    columnNumber: 67\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"First Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 288,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: employee.demographics.firstname,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 289,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Last Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: employee.demographics.lastname,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 291,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Phone Number\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 294,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: employee.demographics.phone,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 295,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Email\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 296,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: employee.demographics.email,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 297,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 293,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Available Credit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 302,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    ref: availableRef,\n                    placeholder: employee.availableCredit.toString(),\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 303,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Cost\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 304,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"number\",\n                    min: 1,\n                    max: 1000,\n                    ref: costRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 305,\n                    columnNumber: 41\n                  }, this), !isCostValid ? /*#__PURE__*/_jsxDEV(Form.Text, {\n                    className: \"alertText\",\n                    children: \"Error: Please enter a valid cost.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 306,\n                    columnNumber: 57\n                  }, this) : null, /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Projected Reimbursement\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 309,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    ref: projectionRef,\n                    readOnly: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 310,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Event Type\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 313,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"select\",\n                    ref: eventTypeRef,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"University Course\",\n                      children: \"University Course\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 315,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Seminar\",\n                      children: \"Seminar\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 316,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Certification Prep Class\",\n                      children: \"Certification Prep Class\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 317,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Certification\",\n                      children: \"Certification\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 318,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Technical Training\",\n                      children: \"Technical Training\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 319,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Other\",\n                      children: \"Other\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 320,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 314,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Start Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 322,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"date\",\n                    ref: startDateRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 323,\n                    columnNumber: 41\n                  }, this), isStartDateValid ? null : /*#__PURE__*/_jsxDEV(Form.Text, {\n                    className: \"alertText\",\n                    children: \"Error: Please enter a valid startdate.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 324,\n                    columnNumber: 68\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"End Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 327,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"date\",\n                    ref: endDateRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 328,\n                    columnNumber: 41\n                  }, this), !isEndDateValid ? /*#__PURE__*/_jsxDEV(Form.Text, {\n                    className: \"alertText\",\n                    children: \"Error: Please enter a valid end date.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 329,\n                    columnNumber: 60\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Grading Format\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 334,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    as: \"select\",\n                    ref: gradingFormatRef,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Letter\",\n                      children: \"Letter\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 336,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Percentage\",\n                      children: \"Percentage\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 337,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"None\",\n                      children: \"None\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 338,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 335,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Location\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    ref: locationRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 341,\n                    columnNumber: 41\n                  }, this), !isLocationValid ? /*#__PURE__*/_jsxDEV(Form.Text, {\n                    className: \"alertText\",\n                    children: \"Error: Please enter a valid location.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 342,\n                    columnNumber: 61\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 333,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Event Description\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 349,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"textarea\",\n                    rows: 3,\n                    ref: eventDescriptionRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 350,\n                    columnNumber: 41\n                  }, this), !isDescriptionValid ? /*#__PURE__*/_jsxDEV(Form.Text, {\n                    className: \"alertText\",\n                    children: \"Error: Please enter a valid description.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 351,\n                    columnNumber: 64\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Justification\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 356,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"textarea\",\n                    rows: 3,\n                    ref: justificationRef\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 357,\n                    columnNumber: 41\n                  }, this), !isJustificationValid ? /*#__PURE__*/_jsxDEV(Form.Text, {\n                    className: \"alertText\",\n                    children: \"Error: Please enter a valid justification.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 358,\n                    columnNumber: 66\n                  }, this) : null]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 355,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                id: \"createRequestButtonRow\",\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  className: \"d-flex justify-content-center\",\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"danger\",\n                    onClick: handleCancelButtonClick,\n                    children: \"Cancel\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 365,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 364,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  className: \"d-flex justify-content-center\",\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"warning\",\n                    type: \"submit\",\n                    onClick: handleSubmitButtonClick,\n                    children: \"Submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 370,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateRequest, \"pi3OQltHFsAbgvmVr5kGwLsWDgM=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useHistory];\n});\n\n_c = CreateRequest;\nexport default CreateRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateRequest\");","map":{"version":3,"sources":["C:/Users/cynth/GitRepos/2012-dec14-react/projectOne/front-end/src/components/createRequest.tsx"],"names":["Container","Form","Button","Row","Col","useHistory","useDispatch","useSelector","useEffect","useRef","employeeService","changeRequest","getEmployee","getSeniorEmployee","requestService","CreateRequest","employee","state","request","dispatch","history","dateCreatedRef","projectionRef","availableRef","eventTypeRef","locationRef","gradingFormatRef","costRef","startDateRef","endDateRef","justificationRef","eventDescriptionRef","iscreateDateValid","isStartDateValid","isEndDateValid","isCostValid","isLocationValid","isDescriptionValid","isJustificationValid","resetValidation","console","log","handleCancelButtonClick","push","handleSubmitButtonClick","e","preventDefault","newRequest","newEmployee","current","value","dateCreated","createdDateStringArray","split","createdDateNumberArray","forEach","string","Number","createdDateYear","createdDateMonth","createdDateDay","startDateStringArray","startDateNumberArray","startDateYear","startDateMonth","startDateDay","differenceInMillis","Date","parse","differenceInDays","event","startDate","isUrgent","availableCredit","toString","projection","cost","endDate","location","description","eventType","justification","gradingFormat","id","now","statusOf","demographics","username","arrayReturned","getSeniorEmployeeByRole","role","then","employees","catch","newArray","prop","newSeniorEmployee","addRequest","requests","updateEmployee","employeeReturned","firstname","lastname","phone","email"],"mappings":"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","sourcesContent":["import Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport '../css/createRequest.css';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { EmployeeState, RequestState } from '../redux/reducer';\r\nimport { MutableRefObject, SyntheticEvent, useEffect, useRef } from 'react';\r\nimport employeeService from '../services/employee.service';\r\nimport { Employee } from '../models/employee.model';\r\nimport { changeRequest, getEmployee, getSeniorEmployee } from '../redux/actions';\r\nimport requestService from '../services/request.service';\r\n\r\nfunction CreateRequest() {\r\n    // get state, use react hooks\r\n    const employee = useSelector((state: EmployeeState) => state.employee);\r\n    //const seniorEmployee = useSelector((state: EmployeeState) => state.seniorEmployee);\r\n    const request = useSelector((state: RequestState) => state.request);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    //refs for all input fields\r\n    const dateCreatedRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    const projectionRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    const availableRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    const eventTypeRef = useRef() as MutableRefObject<HTMLSelectElement>;\r\n    const locationRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    const gradingFormatRef = useRef() as MutableRefObject<HTMLSelectElement>;\r\n    const costRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    const startDateRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    const endDateRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    //const gradeCutOffRef = useRef() as MutableRefObject<HTMLInputElement>;\r\n    const justificationRef = useRef() as MutableRefObject<HTMLTextAreaElement>;\r\n    const eventDescriptionRef = useRef() as MutableRefObject<HTMLTextAreaElement>;\r\n\r\n    \r\n    // validation errors\r\n    let iscreateDateValid: true;\r\n    let isStartDateValid: true;\r\n    let isEndDateValid = true;\r\n    let isCostValid = true;\r\n    let isLocationValid = true;\r\n    let isDescriptionValid = true;\r\n    let isJustificationValid = true;\r\n\r\n    function resetValidation() {\r\n        iscreateDateValid = true;\r\n        isStartDateValid = true;\r\n        isEndDateValid = true;\r\n        isCostValid = true;\r\n        isLocationValid = true;\r\n        isDescriptionValid = true;\r\n        isJustificationValid = true;\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('hello');\r\n    }, [iscreateDateValid, isStartDateValid, isEndDateValid, isCostValid, isLocationValid, isDescriptionValid, isJustificationValid]);\r\n\r\n    //handle cancel button\r\n    function handleCancelButtonClick() {\r\n        history.push(\"/dashboard\");\r\n    }\r\n\r\n    //handle submit button\r\n    async function handleSubmitButtonClick(e: SyntheticEvent) {\r\n        e.preventDefault();\r\n        const newRequest = {...request};\r\n        const newEmployee = {...employee};\r\n\r\n        if (dateCreatedRef.current.value) {\r\n            newRequest.dateCreated = dateCreatedRef.current.value;\r\n\r\n            // separate created date into usable numbers\r\n            const createdDateStringArray = (dateCreatedRef.current.value).split('-');\r\n            const createdDateNumberArray: number[] = [];\r\n            createdDateStringArray.forEach( string => {\r\n                createdDateNumberArray.push(Number(string));\r\n            });\r\n            const createdDateYear = createdDateNumberArray[0];\r\n            const createdDateMonth = createdDateNumberArray[1];\r\n            const createdDateDay = createdDateNumberArray[2];\r\n\r\n            if (startDateRef.current.value) {\r\n                // separate start date into usable numbers\r\n                const startDateStringArray = (startDateRef.current.value).split('-');\r\n                const startDateNumberArray: number[] = [];\r\n                startDateStringArray.forEach( string => {\r\n                    startDateNumberArray.push(Number(string));\r\n                });\r\n                const startDateYear = startDateNumberArray[0];\r\n                const startDateMonth = startDateNumberArray[1];\r\n                const startDateDay = startDateNumberArray[2];\r\n                const differenceInMillis = Date.parse(`${startDateStringArray[1]}/${startDateStringArray[2]}/${startDateStringArray[0]}`) - Date.parse(`${createdDateStringArray[1]}/${createdDateStringArray[2]}/${createdDateStringArray[0]}`);\r\n                const differenceInDays = differenceInMillis / 86400000;\r\n                //start date must be 7 days after creation date\r\n                if (startDateYear > createdDateYear) {\r\n                    newRequest.event.startDate = startDateRef.current.value;\r\n                } else if (startDateYear === createdDateYear) {\r\n                    //check month\r\n                    if(startDateMonth > createdDateMonth) {\r\n                        newRequest.event.startDate = startDateRef.current.value;\r\n                    } else if (startDateMonth === createdDateMonth) {\r\n                        //check day\r\n                        if (differenceInDays >= 7) {\r\n                            newRequest.event.startDate = startDateRef.current.value;\r\n                            if (differenceInDays < 14){\r\n\r\n                                console.log('Created day: ', createdDateDay);\r\n                                newRequest.isUrgent = true;\r\n                            }\r\n                            console.log('is urgent?', newRequest.isUrgent);\r\n\r\n               \r\n\r\n                            if (Number(costRef.current.value)) {\r\n                                // check if number is greater than 0\r\n                                if (Number(costRef.current.value) < 1) {\r\n                                    console.log('Error, please enter a valid cost.');\r\n                                } else {\r\n                                    // check if available credit - cost < 0 --> projection is available credit\r\n                                    // available credit = 0\r\n                                    if ((newEmployee.availableCredit - Number(costRef.current.value)) <= 0) {\r\n                                        newEmployee.availableCredit = 0;\r\n                                        projectionRef.current.value = employee.availableCredit.toString();\r\n                                    } else {\r\n                                        // else, projection is cost\r\n                                        projectionRef.current.value = costRef.current.value;\r\n                                        // available credit = available credit - cost\r\n                                        newEmployee.availableCredit -= Number(costRef.current.value);\r\n                                    }\r\n                                    newRequest.projection = Number(projectionRef.current.value);\r\n\r\n                                    if (Number(projectionRef.current.value) === 0) {\r\n                                        console.log('Error, you have no available credit.');\r\n                                    } else {\r\n                                        console.log('employee\\'s credit is going to be: ', newEmployee.availableCredit);\r\n                                        newRequest.event.cost = Number(costRef.current.value);\r\n\r\n\r\n                                        if (endDateRef.current.value) {\r\n                                            // make sure end date is on or after the start date\r\n                                            if (endDateRef.current.value < startDateRef.current.value) {\r\n                                                console.log('Error, please enter a valid end date.');\r\n                                            } else {\r\n                                            newRequest.event.endDate = endDateRef.current.value;\r\n                                            }\r\n                                            \r\n                                            if (locationRef.current.value) {\r\n                                                newRequest.event.location = locationRef.current.value;\r\n\r\n\r\n                                                if (eventDescriptionRef.current.value) {\r\n                                                    newRequest.event.description = eventDescriptionRef.current.value;\r\n\r\n\r\n                                                    if (eventTypeRef.current.value) {\r\n                                                        newRequest.event.eventType = eventTypeRef.current.value;\r\n\r\n\r\n                                                        if (justificationRef.current.value) {\r\n                                                            newRequest.justification = justificationRef.current.value;\r\n                                                            if (gradingFormatRef.current.value) {\r\n                                                                newRequest.event.gradingFormat = gradingFormatRef.current.value;\r\n                                                                newRequest.id = Date.now();\r\n                                                                newRequest.statusOf = 'Pending';\r\n                                                                newRequest.demographics = employee.demographics;\r\n                                                                newRequest.username = employee.username;\r\n\r\n                                                                // change request state\r\n                                                                dispatch(changeRequest(newRequest));\r\n                                                                //get senior employee of current employee\r\n                                                                let arrayReturned = await employeeService.getSeniorEmployeeByRole(newEmployee.role).then( employees => {\r\n                                                                    return employees;\r\n                                                                }).catch(() => {\r\n                                                                    console.log('Error, could not get senior employee!');\r\n                                                                });\r\n                                                                let newArray: Employee[] = [];\r\n                                                                if (arrayReturned) {\r\n                                                                    for (const prop in arrayReturned) {\r\n                                                                            newArray.push(arrayReturned[prop]);\r\n                                                                        }\r\n                                                                }\r\n                                                                const newSeniorEmployee = newArray[0];\r\n                                                                \r\n                                                                // add request to database\r\n                                                                requestService.addRequest(newRequest).then().catch( () => {\r\n                                                                    console.log('Error: could not add request to database.');\r\n                                                                });\r\n\r\n                                                                newEmployee.requests.push(newRequest);\r\n                                                                newSeniorEmployee.requests.push(newRequest);\r\n                                                                // make changes to DB and update our store\r\n                                                                employeeService.updateEmployee(newEmployee).then( employeeReturned => {\r\n                                                                    console.log('employee dispatched to employee state: ', employeeReturned);\r\n                                                                    dispatch(getEmployee(employeeReturned));\r\n                                                                }).catch( () => {\r\n                                                                    console.log('Employee could not be updated!');\r\n                                                                });\r\n                                                                employeeService.updateEmployee(newSeniorEmployee).then( employeeReturned => {\r\n                                                                    console.log('employee dispatched to senioremployee state: ', employeeReturned);\r\n                                                                    dispatch(getSeniorEmployee(employeeReturned));\r\n                                                                    history.push(\"/dashboard\");\r\n                                                                }).catch( () => {\r\n                                                                    console.log('Employee could not be updated!');\r\n                                                                });\r\n                                                            }\r\n                                                        } else {\r\n                                                            isJustificationValid = false;\r\n                                                            console.log('Error, please enter a justification.');\r\n                                                        }\r\n                                                    } else {\r\n                                                        console.log('Error, please enter an event type.');\r\n                                                    }\r\n                                                } else {\r\n                                                    isDescriptionValid = false;\r\n                                                    console.log('Error, please enter an event description.');\r\n                                                }\r\n                                            } else {\r\n                                                isLocationValid = false;\r\n                                                console.log('Error, please enter a location.');\r\n                                            }\r\n                                        } else {\r\n                                            isEndDateValid = false;\r\n                                            console.log('Error, please enter a end date.');\r\n                                        }\r\n                                    }\r\n                                    \r\n                                }\r\n                    \r\n                            } else {\r\n                                isCostValid = false;\r\n                                console.log('Error, please enter a valid number for cost.');\r\n                            }\r\n                        } else {\r\n                            isStartDateValid = false;\r\n                            console.log('Error, please enter a valid day at least 7 days after created day.');\r\n                        }\r\n                    } else {\r\n                        isStartDateValid = false;\r\n                        console.log('Error, please enter a valid month.');\r\n                    }\r\n                } else {\r\n                    isStartDateValid = false;\r\n                    console.log('Error, please enter a valid year.');\r\n                }\r\n                \r\n            } else {\r\n                isStartDateValid = false;\r\n                console.log('Error, please enter a start date.');\r\n            }\r\n        } else {\r\n            iscreateDateValid = false;\r\n            console.log('Error, please enter a creation date.');\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <Container id=\"createRequestContainer\">\r\n            <Row id=\"reimbursementForm\">\r\n                <Col />\r\n                <Col lg={8}>\r\n                    <Row id=\"reimbursementHeader\">\r\n                        <Col />\r\n                        <Col md=\"10\" className=\"text-center\">\r\n                            <h1>Tuition Reimbursement Form</h1>\r\n                        </Col>\r\n                        <Col />\r\n                    </Row>\r\n                    <Row id=\"reimbursementBody\">\r\n                        <Col>\r\n                            <Form>\r\n                                <Form.Row className=\"justify-content-md-center\">\r\n                                    <Form.Group as={Col} controlId=\"formDateCreated\">\r\n                                            <Form.Label>Today's Date</Form.Label>\r\n                                            <Form.Control type=\"date\" ref={dateCreatedRef}/>\r\n                                            {!iscreateDateValid ? <Form.Text className=\"alertText\">\r\n                                            Error: Please enter a valid creation date.\r\n                                            </Form.Text> : null}\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>First Name</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={employee.demographics.firstname} readOnly/>\r\n                                        <Form.Label>Last Name</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={employee.demographics.lastname} readOnly/>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Phone Number</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={employee.demographics.phone} readOnly/>\r\n                                        <Form.Label>Email</Form.Label>\r\n                                        <Form.Control type=\"text\" placeholder={employee.demographics.email} readOnly/>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Available Credit</Form.Label>\r\n                                        <Form.Control type=\"text\" ref={availableRef} placeholder={employee.availableCredit.toString()} readOnly/>\r\n                                        <Form.Label>Cost</Form.Label>\r\n                                        <Form.Control type=\"number\" min={1} max={1000} ref={costRef} />\r\n                                        {!isCostValid ? <Form.Text className=\"alertText\">\r\n                                            Error: Please enter a valid cost.\r\n                                            </Form.Text> : null}\r\n                                        <Form.Label>Projected Reimbursement</Form.Label>\r\n                                        <Form.Control type=\"text\" ref={projectionRef} readOnly />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                    <Form.Label>Event Type</Form.Label>\r\n                                        <Form.Control as=\"select\" ref={eventTypeRef}>\r\n                                            <option value=\"University Course\">University Course</option>\r\n                                            <option value=\"Seminar\">Seminar</option>\r\n                                            <option value=\"Certification Prep Class\">Certification Prep Class</option>\r\n                                            <option value=\"Certification\">Certification</option>\r\n                                            <option value=\"Technical Training\">Technical Training</option>\r\n                                            <option value=\"Other\">Other</option>\r\n                                        </Form.Control>\r\n                                        <Form.Label>Start Date</Form.Label>\r\n                                        <Form.Control type=\"date\" ref={startDateRef} />\r\n                                        {isStartDateValid ? null : <Form.Text className=\"alertText\">\r\n                                            Error: Please enter a valid startdate.\r\n                                            </Form.Text>}\r\n                                        <Form.Label>End Date</Form.Label>\r\n                                        <Form.Control type=\"date\" ref={endDateRef} />\r\n                                        {!isEndDateValid ? <Form.Text className=\"alertText\">\r\n                                            Error: Please enter a valid end date.\r\n                                            </Form.Text> : null}\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Grading Format</Form.Label>\r\n                                        <Form.Control type=\"text\" as=\"select\" ref={gradingFormatRef}>\r\n                                            <option value=\"Letter\">Letter</option>\r\n                                            <option value=\"Percentage\">Percentage</option>\r\n                                            <option value=\"None\">None</option>\r\n                                        </Form.Control>\r\n                                        <Form.Label>Location</Form.Label>\r\n                                        <Form.Control type=\"text\" ref={locationRef} />\r\n                                        {!isLocationValid ? <Form.Text className=\"alertText\">\r\n                                            Error: Please enter a valid location.\r\n                                            </Form.Text> : null}\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Event Description</Form.Label>\r\n                                        <Form.Control  as=\"textarea\" rows={3} ref={eventDescriptionRef} />\r\n                                        {!isDescriptionValid ? <Form.Text className=\"alertText\">\r\n                                            Error: Please enter a valid description.\r\n                                            </Form.Text> : null}\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Justification</Form.Label>\r\n                                        <Form.Control as=\"textarea\" rows={3} ref={justificationRef} />\r\n                                        {!isJustificationValid ? <Form.Text className=\"alertText\">\r\n                                            Error: Please enter a valid justification.\r\n                                            </Form.Text> : null}\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row id=\"createRequestButtonRow\">\r\n                                    <Col className=\"d-flex justify-content-center\">\r\n                                        <Button variant=\"danger\" onClick={handleCancelButtonClick}>\r\n                                            Cancel\r\n                                        </Button>\r\n                                    </Col>\r\n                                    <Col className=\"d-flex justify-content-center\">\r\n                                        <Button variant=\"warning\" type=\"submit\" onClick={handleSubmitButtonClick}>\r\n                                            Submit\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Form.Row>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n                <Col />\r\n            </Row>\r\n        </Container>\r\n      );\r\n}\r\n\r\nexport default CreateRequest;"]},"metadata":{},"sourceType":"module"}